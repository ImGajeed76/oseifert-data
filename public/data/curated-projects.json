[
  {
    "title": "Bergpreis - Soundbox",
    "portfolioUrl": "/projects/bergpreis---soundbox",
    "repoUrl": "",
    "description": "The Bergpreis Soundbox is an embedded audio playback system I developed during my apprenticeship. It replaces a\ndisruptive siren in an interactive game with dynamic, high-quality sound effects and music played from an SD card,\ncontrolled by an STM32 microcontroller.",
    "role": "Embedded Systems Developer",
    "technologies": [
      "STM32",
      "C",
      "FreeRTOS",
      "SPI",
      "UART"
    ],
    "status": "Completed",
    "content": "# Bergpreis Soundbox: Engineering a Better Game Experience\n\n## The Idea: What It Is and Why I Built It\n\nDuring my apprenticeship as an Electronic Technician at the Technische Fachschule Bern (TFBern), I had the opportunity\nto work on a fascinating project: the \"Bergpreis - Soundbox.\" This project was an enhancement for an existing\ninteractive game called \"Bergpreis\" (Mountain Prize), which was used to engage audiences at fairs and events.\n\n**What was the \"Bergpreis\" game about?**\n\nThe game involved two participants on stationary bicycles. After a start signal, they had to pedal as hard as possible,\nmaking their virtual figures climb a mountain on a screen. The faster they pedaled, the quicker their figure ascended.\nThe original system used a loud and, frankly, quite disruptive siren for acoustic feedback. While effective at grabbing\nattention, it wasn't ideal for all environments and could become annoying over extended periods, especially in quieter\nsettings or during prolonged use at exhibitions.\n\nThis is where the Soundbox came in. The goal was to replace the siren with a more sophisticated and flexible audio\nsolution. Instead of a single, blaring noise, the new system needed to:\n\n* Play various sound effects or music tracks (WAV files).\n* Store these audio files on a readily available medium (a MicroSD card).\n* Allow for volume control to suit different environments.\n* Integrate with the existing game controller with minimal modification, as much of the game was already developed.\n\nThe Soundbox project was my Individual Practical Work (IPA), a significant part of my apprenticeship, allowing me to\napply and expand my skills in electronics and embedded systems.\n\n## The Journey: From Concept to Reality\n\nDeveloping the Soundbox involved designing custom hardware, writing embedded software, and integrating everything into a\nfunctional unit.\n\n**Hardware Design:**\n\nThe heart of the Soundbox is an **STM32G474CET6 microcontroller**. This powerful MCU was chosen for its processing\ncapabilities, suitable for handling audio data and real-time operations.\n\nThe key hardware components and design aspects include:\n\n* **Audio Storage:** A **MicroSD card slot** allows for easy storage and updating of WAV audio files. Communication with\n  the SD card is handled via the **SPI** (Serial Peripheral Interface) protocol.\n* **Audio Output:** The digital audio data from the MCU is converted to an analog signal by its internal **DAC** (\n  Digital-to-Analog Converter). This signal is then fed to an external **Adafruit MAX9744 Class-D stereo audio amplifier\n  **, capable of delivering up to 20W per channel. We used one channel for a clear, loud output. The amplifier's volume\n  and mute functions are controlled via **I2C**.\n* **Control Interface:** The Soundbox receives commands from the main \"Bergpreis\" game controller via a **UART** (\n  Universal Asynchronous Receiver/Transmitter) interface. This was crucial as the existing game system had limited\n  available connections. We cleverly used the power supply line to also carry these data signals, which were then\n  separated on the Soundbox PCB.\n* **Power Supply:** The system is powered by a 12V input, which is then regulated down to 3.3V for the microcontroller\n  and other digital components using an on-board switching regulator.\n* **Custom PCB:** I designed a custom Printed Circuit Board (PCB) to house the microcontroller, SD card slot, power\n  regulation circuitry, and connectors for the amplifier and external signals.\n* **Enclosure:** A custom 3D-printed enclosure was designed to protect the electronics, aiming for a degree of\n  robustness and resistance to light moisture, suitable for event use. It also included mounts for signal LEDs.\n\n**Software Development:**\n\nThe firmware for the STM32 microcontroller was developed to be modular and responsive.\n\n* **Real-Time Operating System (RTOS):** **FreeRTOS** was used to manage multiple tasks concurrently. This was essential\n  for handling audio playback, command processing, and other background operations smoothly without interference.\n* **File System:** The **FatFs** library was integrated to manage files on the MicroSD card, allowing the Soundbox to\n  read the WAV audio files.\n* **Audio Playback Engine:** This core software module is responsible for:\n    * Parsing WAV file headers to understand audio format (e.g., sample rate).\n    * Reading audio data from the SD card.\n    * Managing audio buffers.\n    * Continuously feeding data to the MCU's DAC using **DMA** (Direct Memory Access). DMA is critical here as it\n      offloads the CPU from the repetitive task of sending data samples to the DAC, freeing it up for other tasks and\n      ensuring smooth, uninterrupted audio.\n* **Command Handling:** A UART-based command protocol was defined to allow the main game to control the Soundbox. For\n  example, a specific byte value would instruct the Soundbox to play \"1.wav\" or set the volume to a certain level. The\n  protocol was designed to be simple, using single-byte commands to minimize transmission time over the shared\n  power/data line.\n    * The command byte was structured with the first 3 bits defining the command (e.g., Play, Stop, Set Volume, Mute)\n      and the remaining 5 bits for parameters (e.g., track number 1-31, volume level 0-31).\n* **Audio File Preparation:** Audio files (e.g., MP3 or other WAV formats) needed to be converted to a specific format:\n  16-bit Mono PCM WAV. The open-source tool **FFmpeg** was recommended for this conversion process.\n* **Development Environment:** The firmware was developed using **STM32CubeMX** and **CLion**.\n\nThe overall software architecture separated hardware control, service logic (managing playback states), and application\nlogic (responding to commands).\n\n## Navigating Challenges: Hurdles and Solutions\n\nThis project presented several interesting challenges:\n\n* **Technical Challenges:**\n    * **Smooth Audio Playback:** Ensuring continuous, glitch-free audio playback was paramount. This required careful\n      management of data buffers, precise timing for the DAC, and efficient use of DMA and FreeRTOS to prevent underruns\n      or overruns. The STM32G474's 170 MHz clock speed was beneficial here.\n    * **Limited Interface:** The constraint of using the existing power line for data communication required a robust\n      separation and signal conditioning circuit and a simple, reliable UART protocol.\n    * **SD Card Reliability:** Interfacing with SD cards can sometimes be tricky; ensuring stable communication via SPI\n      and proper handling with FatFs was important.\n    * **Enclosure Design:** Creating a compact yet robust enclosure that allowed for easy assembly and access while\n      providing some protection was an iterative process. The initial design for mounting signal lights had a slight\n      measurement error that needed a workaround.\n* **Non-Technical Challenges:**\n    * Like any project, managing time effectively and debugging complex embedded systems (where you can't just `print()`\n      everything easily) were part of the learning curve.\n\n* **Solutions:**\n    * The use of **DMA** for both DAC output and SPI communication significantly reduced CPU load, which was key for\n      smooth audio.\n    * **FreeRTOS** helped structure the code and manage concurrent operations, preventing tasks from blocking each\n      other.\n    * **Modular firmware design** made it easier to develop, test, and debug individual components of the software.\n    * Careful **PCB layout**, keeping analog and digital grounds separate where appropriate, and using bypass capacitors\n      helped with noise.\n    * For the signal light mounting, while not perfect, there was still enough space to securely mount them.\n\n## The Outcome: Where It Stands and What I Learned\n\nThe Bergpreis Soundbox project was successfully completed. The final unit could reliably receive commands and play the\ncorresponding WAV audio files from the MicroSD card, with controllable volume. It effectively replaced the old siren\nsystem, meeting all the core requirements defined in the project brief.\n\n* **Goals Achieved:** Yes, the primary goal of creating a flexible, SD card-based audio playback system to enhance the \"\n  Bergpreis\" game was met.\n* **Key Learnings:** This project was an immense learning experience. I gained practical skills and deeper understanding\n  in:\n    * **Microcontroller Programming:** Working extensively with the STM32 platform.\n    * **Peripheral Interfacing:** Implementing SPI for SD cards, I2C for the audio amplifier, UART for command input,\n      and using DACs and DMA.\n    * **Real-Time Operating Systems:** Practical application of FreeRTOS for task scheduling and inter-task\n      communication.\n    * **Audio Fundamentals:** Understanding WAV file formats and digital audio playback.\n* **Proudest Aspect:** Seeing (and hearing!) the whole system come together – from designing the PCB, soldering\n  components, writing the firmware, to finally playing custom sounds on command – was incredibly rewarding. The\n  successful integration of FreeRTOS and DMA for smooth audio playback felt like a significant achievement.\n\nThe Bergpreis Soundbox was a challenging yet highly fulfilling project that significantly contributed to my skills as an\naspiring Electronic Technician.",
    "readme": "",
    "license": null,
    "stats": {
      "stars": 0,
      "forks": 0,
      "watchers": 0,
      "openIssues": 0,
      "lastUpdated": "2025-10-25T00:23:06.000Z",
      "createdAt": "2025-10-25T00:23:06.000Z",
      "size": 0,
      "language": "Unknown",
      "languages": []
    },
    "platform": {
      "type": "unknown",
      "url": "",
      "apiAvailable": false
    },
    "writtenAt": "2025-10-21T00:00:00.000Z",
    "updatedAt": "2025-10-21T00:00:00.000Z"
  },
  {
    "title": "Syrup",
    "portfolioUrl": "/projects/Syrup",
    "repoUrl": "https://github.com/Abdallah-Alwarawreh/Syrup",
    "liveUrl": "https://joinsyrup.com/",
    "description": "Syrup is a lightweight, open-source browser extension designed to make finding and applying the best coupons effortless,\nprioritizing transparency, user privacy, and ethical design over the profit-driven motives seen in many alternatives.",
    "role": "Maintainer",
    "technologies": [
      "Go",
      "PostgreSQL",
      "Redis",
      "JavaScript"
    ],
    "status": "Active",
    "content": "# Syrup: Building an Open-Source, Ethical Alternative to Honey\n\n## The Idea: What It Is and Why I Built It\n\nSyrup is a browser extension that automatically finds and applies coupons while you shop online. The core idea was\nsparked by discussions around the popular extension Honey, particularly Hexium's YouTube video \"Honey is a SCAM... so I\nmade my own\" and the original \"Exposing the Honey Influencer Scam\" video. These highlighted concerns about data privacy,\ntransparency, and the business models of existing coupon tools. Funny enough, I'd been thinking about a similar concept\nmyself just days before seeing Hexium's video.\n\nThe main problem Syrup addresses is the lack of a truly open-source, community-driven, and privacy-respecting coupon\nfinder. Existing tools often feel like black boxes, potentially collecting more data than necessary or prioritizing\ncertain retailers for profit. My motivation was to contribute to building a better alternative – one that puts users\nfirst. Hexium's initial version was a proof-of-concept, and seeing the need for a robust backend, I offered to build it.\nWhile others initially showed interest, my motivation kept me going, and I dove into creating the API. This project is\nfor anyone who wants an effective coupon tool they can trust and potentially even contribute to.\n\n## The Journey: From Concept to Reality\n\nMy first step was focusing on the backend API, aiming for something reliable and efficient. I decided on the following\ntech stack:\n\n* **Go (Golang):** I chose Go because I wanted something fast and efficient. Its ability to compile into a single binary\n  makes deployment incredibly simple, which is great for an open-source project. Plus, I was eager to learn it, and it\n  turned out to be a fantastic language for building web APIs – surprisingly straightforward.\n* **PostgreSQL:** A powerful and reliable open-source relational database, perfect for storing structured data about\n  coupons, stores, and user feedback (like ratings).\n* **Redis:** Selected specifically to tackle performance issues. Caching frequently accessed data or computed results (\n  like coupon scores) in Redis significantly speeds up responses.\n\nWith these tools, I built the [DiscountDB-API](https://github.com/ImGajeed76/discountdb-api), an open-source backend to\nmanage coupon data. I also created a simple frontend, [DiscountDB](https://discountdb.ch/), to interact with it. Seeing\nmy commitment and the functional backend, Hexium added me as a maintainer for the main Syrup browser extension project,\nwhich now uses the DiscountDB-API.\n\nThe project continues to evolve. We are currently planning and discussing\na [new V2 API standard](https://github.com/Abdallah-Alwarawreh/Syrup/pull/120). The goal here is decentralization and\nflexibility. We want users to be able to host their own backend instances or even develop entirely new backends\nconforming to the standard, simply by changing the API URL in the extension settings. This supports the vision of a\ntruly public, free, and anonymous coupon database ecosystem.\n\n## Navigating Challenges: Hurdles and Solutions\n\nThe biggest initial hurdle was **performance**. Calculating the best coupon involved potentially complex scoring and\nfiltering logic across many coupons. Early versions of the API could take up to 4 seconds for some requests, which is\nfar too slow for a good user experience.\n\n* **Solution:** Implementing Redis caching was key. By storing recent search results and pre-calculated scores, we\n  drastically reduced response times, often down to around 200ms.\n* **Future Exploration:** I've also looked into technologies like SpacetimeDB. While primarily designed for real-time\n  multiplayer games, its architecture might offer interesting possibilities for efficiently handling computations like\n  coupon scoring in the future. It's an idea I'm keeping in mind.\n\nAnother significant challenge is **coupon management**. Currently, adding new coupons and managing existing ones\neffectively within the database is difficult.\n\n* **Solution:** This is a core focus of the upcoming V2 API design. We're building the new standard with robust coupon\n  submission, verification, and management features in mind.\n\nOn a personal level, tackling this project meant **learning Go from scratch**. While a challenge initially, it was\nincredibly rewarding. I quickly grew to appreciate the language's simplicity, performance, and tooling, which made\nbuilding the API an enjoyable process.\n\n## The Outcome: Where It Stands and What I Learned\n\nSyrup and its backend (DiscountDB-API) are functional and actively used, but development is ongoing. As an open-source\nproject maintained by volunteers (like me, Hexium, and others) in our free time, progress can sometimes be slow, but\nit's steady.\n\nWe haven't fully realized the V2 vision yet, but the current version successfully provides an ethical, open-source\nalternative, achieving the core initial goal.\n\nKey Learnings:\n\n* **Technical Skills:** Gained significant experience in Go, API design (RESTful principles), database management (\n  PostgreSQL), and performance optimization using caching (Redis).\n* **Open Source:** Learned about collaborating on a public project, managing contributions (even if small-scale\n  currently), and the importance of clear standards (like the V2 API plan).\n* **Problem Solving:** Tackling the performance issues required research and understanding trade-offs between different\n  caching strategies.\n\nI'm most proud of successfully learning Go through this project and becoming a maintainer alongside Hexium, contributing\nmeaningfully to a project I believe in.\n\nPotential next steps include finalizing and implementing the V2 API standard, building better tools for coupon\nmanagement, and continuing to grow the Syrup user and contributor community.\n\n## Links:\n\n* Syrup Website: [https://joinsyrup.com/](https://joinsyrup.com/)\n* Syrup Extension\n  Repository: [https://github.com/Abdallah-Alwarawreh/Syrup](https://github.com/Abdallah-Alwarawreh/Syrup)\n* DiscountDB API\n  Repository: [https://github.com/ImGajeed76/discountdb-api](https://github.com/ImGajeed76/discountdb-api)",
    "readme": "# Syrup: The Open-Source Honey Alternative\n\n[![Build Extension](https://github.com/Abdallah-Alwarawreh/Syrup/actions/workflows/build-extension.yml/badge.svg)](https://github.com/Abdallah-Alwarawreh/Syrup/actions/workflows/build-extension.yml) [![Discord](https://img.shields.io/discord/1322120002576453745?color=5865F2&label=Discord&logo=discord&logoColor=white)](https://dsc.gg/hexium)\n\nSyrup is a lightweight, open-source browser extension designed to make finding and applying the best coupons effortless. Unlike traditional tools like Honey, Syrup prioritizes **transparency**, **user privacy**, and **ethical design** over profit-driven motives.\n\nPlease read [the privacy policy](https://joinsyrup.com/PrivacyPolicy).\n\nYou can help the project financially by becoming a Patreon member [here](https://www.patreon.com/c/HexiumDev/membership) or on [Ko-fi](https://ko-fi.com/HexiumDev).\n\n---\n\n## 🎥 Featured Video\n\nWatch how and why Syrup was made!\n\n<div align=\"center\">  \n  <a href=\"https://www.youtube.com/watch?v=uBy9rERgmlU\">  \n    <img src=\"imgs/thumbnail.png\" alt=\"Honey Is A Scam... So I Made My Own\">\n    <img src=\"imgs/AvailableonYouTube-white-SVG.svg\" alt=\"Watch on YouTube\" style=\"position: absolute; bottom: 10px; right: 10px; width: 15%;\">\n  </a>  \n</div>\n\n---\n\n## 🌟 Features\n\n-   🔍 **Smart Coupon Finder**: Automatically scans for and applies the best coupons during checkout.\n-   🌱 **Ethical & Transparent**: Open-source and free from hidden agendas or shady affiliate deals.\n-   🔒 **Privacy-Focused**: No tracking, no data harvesting just savings.\n\n---\n\n## 💪 Installing\n\nThe Syrup extension is availabe to anyone using a Chromium or Firefox-based browser with WebExtension support!\n\n[![Chrome download link](https://user-images.githubusercontent.com/585534/107280622-91a8ea80-6a26-11eb-8d07-77c548b28665.png)](https://chromewebstore.google.com/detail/syrup/odfgjmajnbkiabjnfiijllkihjpilfch)\n[![Firefox download link](https://user-images.githubusercontent.com/585534/107280546-7b9b2a00-6a26-11eb-8f9f-f95932f4bfec.png)](https://addons.mozilla.org/en-US/firefox/addon/syrup)\n...or manually as a [.crx-file](https://github.com/Abdallah-Alwarawreh/Syrup/releases/)\n\n---\n\n## 🚀 Building\n\n0. **Prerequisites**: \\\n   [Node.js](https://nodejs.org/) and npm installed for development.\n1. **Download the Extension**:  \n   Clone or download the repo:\n\n    ```bash\n    git clone https://github.com/Abdallah-Alwarawreh/Syrup.git\n    cd Extension-React\n    ```\n\n2. **Build the Extension**:  \n   Install dependencies and build:\n\n    ```bash\n    npm install\n    npm run build\n    ```\n\n3. **Add to Your Browser**:\n    - Open your browser’s developer mode.\n    - Load the `dist` folder as an unpacked extension.\n\n---\n\n## 🤝 Contributing\n\nWe welcome contributions to improve Syrup! Here’s how you can help:\n\n1. Fork the repository.\n2. Create a branch for your feature or bug fix:\n    ```bash\n    git checkout -b my-new-feature\n    ```\n3. Commit your changes and push the branch:\n    ```bash\n    git commit -m \"Add my feature\"\n    git push origin my-new-feature\n    ```\n4. Open a Pull Request!\n\nFor major changes, please open an issue first to discuss what you’d like to contribute.\n\n### Translating\n\nYou can also contribute by helping to translate Syrup! This is done through our [Crowdin](https://crowdin.com/project/syrup-extension) instance.\n\n---\n\n## 🚀 Backend / API\n\n> ⚠️ Work in Progress! Feel free to contribute and shape the future of Syrup!\n\n### Exchangeable Backend System\n\nThe backend system is designed to be fully exchangeable! You can:\n\n-   🏠 Host existing backends yourself\n-   🛠️ Write your own implementation\n-   🔌 Use different providers\n-   ⚙️ Configure everything in the extension settings\n\n### API Standard\n\nThe backend follows the Syrup API Standard (SAS). Check out our [backend documentation](https://github.com/Abdallah-Alwarawreh/Syrup/tree/main/backend/standard) for all the details! Found something that could be improved? Create an issue - we'd love to hear your thoughts!\n\n### Current Implementation\n\nThe current backend is maintained by [@ImGajeed76](https://github.com/ImGajeed76). Check out the implementation here: [discountdb-api](https://github.com/ImGajeed76/discountdb-api)\n\nGot questions? Feel free to:\n\n-   💬 Contact @ImGajeed76 on Discord\n-   📝 Open an issue in the [discountdb-api](https://github.com/ImGajeed76/discountdb-api) repo\n-   🤝 Contribute to the project (and maybe leave a star 😉)\n\n---\n\n## 📚 Tech Stack\n\n[Techstack](./techstack.md)\n\n---\n\n## ❤️ Acknowledgements\n\nSpecial thanks to the amazing people who made Syrup possible:\n\n-   **Nufshi** and **skyerush** for their support in creating the video.\n-   **Taco** for incredible emotional support.\n-   And for our lovely contributors:\n    -   @abstra208 - UI, Safari Extension, Translation and Bug Fixes.\n    -   @mvlwarekekw - Translation and Bug Fixes.\n    -   @1A3Dev - UI, Safari Extension and Bug Fixes.\n    -   @cranberry3148 - Auto Apply Coupons and Bug Fixes.\n    -   @ImGajeed76 - API and Endpoints and his [backend (go star)](https://github.com/ImGajeed76/discountdb-api) we use\n    -   @hammerill - Github Build Script.\n    -   @chipseater - Redirection Handler in Website.\n    -   @JxxIT - Bug Fixes.\n    -   And to all other individuals who edited the README.\n\n---\n\n## 📄 License\n\nSyrup is licensed under the [GPL-3.0 License](LICENSE).\n\n---\n\n## 🗨️ Join the Community\n\nHave questions, ideas, or just want to connect? Join our [Discord Community](https://discord.com/invite/SxTjmsS2g9)!\n",
    "license": {
      "name": "GNU General Public License v3.0",
      "text": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\nCopyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\nEveryone is permitted to copy and distribute verbatim copies\nof this license document, but changing it is not allowed.\n\n                            Preamble\n\nThe GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\nThe licenses for most software and other practical works are designed\nto take away your freedom to share and change the works. By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users. We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors. You can apply it to\nyour programs, too.\n\nWhen we speak of free software, we are referring to freedom, not\nprice. Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\nTo protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights. Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\nFor example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received. You must make sure that they, too, receive\nor can get the source code. And you must show them these terms so they\nknow their rights.\n\nDevelopers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\nFor the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software. For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\nSome devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so. This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software. The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable. Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts. If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\nFinally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary. To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\nThe precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n0. Definitions.\n\n\"This License\" refers to version 3 of the GNU General Public License.\n\n\"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n\"The Program\" refers to any copyrightable work licensed under this\nLicense. Each licensee is addressed as \"you\". \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\nTo \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy. The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\nA \"covered work\" means either the unmodified Program or a work based\non the Program.\n\nTo \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy. Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\nTo \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies. Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\nAn interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License. If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n1. Source Code.\n\nThe \"source code\" for a work means the preferred form of the work\nfor making modifications to it. \"Object code\" means any non-source\nform of a work.\n\nA \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\nThe \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form. A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\nThe \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities. However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work. For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\nThe Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\nThe Corresponding Source for a work in source code form is that\nsame work.\n\n2. Basic Permissions.\n\nAll rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met. This License explicitly affirms your unlimited\npermission to run the unmodified Program. The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work. This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\nYou may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force. You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright. Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\nConveying under any other circumstances is permitted solely under\nthe conditions stated below. Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\nNo covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\nWhen you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n4. Conveying Verbatim Copies.\n\nYou may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\nYou may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n5. Conveying Modified Source Versions.\n\nYou may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\nA compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit. Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n6. Conveying Non-Source Forms.\n\nYou may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\nA separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\nA \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling. In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage. For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product. A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n\"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source. The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\nIf you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information. But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\nThe requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed. Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\nCorresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n7. Additional Terms.\n\n\"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law. If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\nWhen you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit. (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.) You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\nNotwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\nAll other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10. If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term. If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\nIf you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\nAdditional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n8. Termination.\n\nYou may not propagate or modify a covered work except as expressly\nprovided under this License. Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\nHowever, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\nMoreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\nTermination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License. If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n9. Acceptance Not Required for Having Copies.\n\nYou are not required to accept this License in order to receive or\nrun a copy of the Program. Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance. However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work. These actions infringe copyright if you do\nnot accept this License. Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n10. Automatic Licensing of Downstream Recipients.\n\nEach time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License. You are not responsible\nfor enforcing compliance by third parties with this License.\n\nAn \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations. If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\nYou may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License. For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n11. Patents.\n\nA \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based. The\nwork thus licensed is called the contributor's \"contributor version\".\n\nA contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version. For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\nEach contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\nIn the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement). To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\nIf you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients. \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\nIf, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\nA patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License. You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\nNothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n12. No Surrender of Others' Freedom.\n\nIf conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License. If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all. For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n13. Use with the GNU Affero General Public License.\n\nNotwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work. The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n14. Revised Versions of this License.\n\nThe Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time. Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number. If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation. If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\nIf the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\nLater license versions may give you additional or different\npermissions. However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n15. Disclaimer of Warranty.\n\nTHERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n16. Limitation of Liability.\n\nIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n17. Interpretation of Sections 15 and 16.\n\nIf the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\nIf you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\nTo do so, attach the following notices to the program. It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License. Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\nYou should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\nThe GNU General Public License does not permit incorporating your program\ninto proprietary programs. If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library. If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License. But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n",
      "spdxId": "GPL-3.0",
      "url": "https://api.github.com/licenses/gpl-3.0"
    },
    "stats": {
      "stars": 767,
      "forks": 40,
      "watchers": 767,
      "openIssues": 13,
      "lastUpdated": "2025-10-24T00:26:58Z",
      "createdAt": "2024-12-27T13:16:51Z",
      "size": 7093,
      "language": "TypeScript",
      "languages": [
        {
          "name": "TypeScript",
          "bytes": 222337,
          "percentage": 80.06546774507191,
          "color": "#3178c6"
        },
        {
          "name": "JavaScript",
          "bytes": 41131,
          "percentage": 14.811627186759527,
          "color": "#f1e05a"
        },
        {
          "name": "CSS",
          "bytes": 7201,
          "percentage": 2.593142091654843,
          "color": "#663399"
        },
        {
          "name": "Swift",
          "bytes": 5242,
          "percentage": 1.8876893271010535,
          "color": "#F05138"
        },
        {
          "name": "HTML",
          "bytes": 1783,
          "percentage": 0.6420736494126629,
          "color": "#e34c26"
        }
      ]
    },
    "platform": {
      "type": "github",
      "url": "https://github.com/Abdallah-Alwarawreh/Syrup",
      "apiAvailable": true
    },
    "writtenAt": "2025-10-21T00:00:00.000Z",
    "updatedAt": "2025-10-21T00:00:00.000Z"
  },
  {
    "title": "Charmer",
    "portfolioUrl": "/projects/charmer",
    "repoUrl": "https://github.com/ImGajeed76/charmer",
    "description": "Charmer is a Go package designed to automatically generate Terminal User Interfaces (TUIs) directly from your Go\nfunctions. Leveraging the power of Charm libraries, it aims to transform annotated functions into interactive\ncommand-line interfaces, removing the need to manually build the UI.",
    "role": "Creator",
    "technologies": [
      "Go",
      "Charm",
      "Bubble Tea",
      "Lipgloss"
    ],
    "status": "Creator",
    "content": "# Charmer: Turning Go Functions into Interactive TUIs\n\n## The Idea: What It Is and Why I Built It\n\nCharmer is a Go library that takes specially annotated Go functions and automatically builds a navigable Terminal User\nInterface (TUI) around them. The core idea is to drastically simplify the process of creating command-line tools that\nneed more than just simple flags – tools where users can browse and execute different functionalities easily.\n\nThe motivation for Charmer grew directly out of my work on\nthe [TFUtils-GO](https://oseifert.vercel.app/projects/933782301) project. While rewriting TFUtils in Go, I realized I\nneeded a robust way to discover and present various commands (like project setup, file management, etc.) within a TUI.\nInstead of building this logic directly into TFUtils-GO, I saw an opportunity to create a separate, reusable library. I\nwanted something modular that could potentially be used for other Go applications needing a simple TUI structure, not\njust for my specific TFBern tool.\n\nCurrently, the primary user is TFUtils-GO (and therefore, myself and potentially fellow students). However, I envision\nCharmer being useful for any Go developer who wants to quickly expose functions through an interactive command-line\ninterface without getting bogged down in TUI implementation details.\n\n## The Journey: From Concept to Reality\n\nThe core technical choice was to build upon the excellent [Charm](https://charm.sh/) ecosystem (libraries like Bubble\nTea for TUI logic and Lipgloss for styling). These libraries provide the building blocks for creating beautiful and\nfunctional TUIs in Go. My goal with Charmer was to create a higher-level abstraction *on top* of Charm, specifically\nfocused on the pattern of \"functions as commands.\"\n\nInstead of relying on runtime reflection, the design uses a **custom code generator**. Before building the final\napplication, the developer runs this generator. It scans the project for specially marked functions (the \"Charms\"),\ngathers information about them (like their names and parameters), and then **generates Go code that explicitly imports\nand registers these functions** within the Charmer framework. This generated file is then compiled into the final\nbinary. This approach avoids the potential overhead and complexities of reflection and ensures that all discoverable\nfunctions are known at compile time. A significant part of the early development focused on building this generator and\ndefining how functions should be structured or annotated to be correctly picked up and integrated into the TUI.\n\nAs the idea developed, I realized that many command-line tools interact with files and configurations. This led to\ndeveloping helper components within Charmer itself, aiming to make common tasks easier for the functions that Charmer\nwould eventually expose.\n\n## Navigating Challenges: Hurdles and Solutions\n\nOne of the main challenges was designing abstractions that are both powerful and simple to use. I wanted to hide\ncomplexity without losing flexibility. A prime example arose when dealing with file operations needed by TFUtils-GO\ncommands.\n\n* **Challenge:** How to handle file operations consistently, whether the files are local or on a remote server (like\n  SFTP), without forcing the developer using Charmer to write complex conditional logic?\n* **Solution:** I developed my own path handling abstraction within Charmer, inspired by Python's `pathlib`. This allows\n  treating different kinds of paths (local, SFTP) uniformly. You can create path objects for different sources and use\n  simple methods like `CopyTo` to transfer files between them, abstracting away the underlying protocol differences.\n\n  Here’s a conceptual example of what this enables:\n  ```go\n  // NOTE: This is illustrative syntax and may change.\n  \n  // Define a path on an SFTP server\n  path1 := path.New(\"sftp://user@domain.com/remote/path/file.txt\")\n  // Define a local path\n  path2 := path.New(\"/local/destination/file.txt\")\n  \n  // Copy from SFTP to local with one command\n  err := path1.CopyTo(path2)\n  ```\n\n* **Challenge:** If Charmer's helpers handle SFTP, how do we manage credentials securely without hardcoding them or\n  constantly prompting the user?\n* **Solution:** I created a small configuration management utility built around\n  the [go-keyring](https://github.com/zalando/go-keyring) library. This allows storing sensitive information like\n  passwords or API keys securely in the operating system's native keyring.\n\n  ```go\n  // NOTE: This is illustrative syntax and may change.\n  \n  // Create a config instance tied to a specific environment/app name\n  cfg := config.New(\"my-app-config\")\n  \n  // Set a secret value (stored securely in the keyring)\n  err := cfg.Set(\"sftp_password\", \"mySecretPassword\")\n  \n  // Retrieve the secret value later\n  password := cfg.Get(\"sftp_password\")\n  ```\n  This way, credentials are kept safe, managed by the OS, and easily accessible when needed by Charmer-powered\n  functions.\n\n## The Outcome: Where It Stands and What I Learned\n\nCharmer is still in the early stages of development, but the core concept is taking shape, and it's already serving its\ninitial purpose as the engine for TFUtils-GO. While the ultimate goal of a fully generic, easy-to-use TUI generator\nisn't complete, it feels achievable.\n\nThis project has been a great way to dive deeper into Go, particularly exploring generators, interface design, and\nbuilding reusable libraries. Working with the Charm libraries has also been insightful. I've learned a lot about the\nimportance of good abstraction and how challenging but rewarding it can be to design APIs that are simple on the surface\nbut handle complexity underneath.\n\nI'm particularly pleased with the path handling abstraction. The ability to represent and operate on local and remote\nfiles using the same interface feels like a powerful simplification, making it much cleaner to write functions that\ninteract with different file systems.\n\nFuture plans for Charmer include:\n\n* Refining the function annotation and discovery process.\n* Improving the generated UI/UX and developer experience (DX).\n* Adding more tests to ensure it works reliably across different platforms.\n* Expanding the built-in helpers based on common needs for CLI tools.\n* Improving overall performance and robustness.",
    "readme": "# 🎭 Charmer\n\nCharmer is a Go package that automatically generates Terminal User Interfaces (TUIs) from your Go functions. Powered\nby [Charm](https://github.com/charmbracelet) libraries, it transforms annotated functions into beautiful, navigable\ncommand-line interfaces without the hassle of UI implementation.\n\n[📚 Documentation](https://ImGajeed76.github.io/charmer)\n\n## ✨ Features\n\n- 🎯 **Simple Integration** - Just annotate your functions with `@Charm`\n- 🌳 **Automatic TUI Generation** - Create hierarchical menus with zero UI code\n- ⚡ **Charm-Powered** - Built on the robust Bubbles and BubbleTea libraries\n- 📝 **Documentation-Driven** - Use annotations to define your CLI structure\n- 🚀 **Focus on Logic** - Write your functions, let Charmer handle the UI\n\n## 🚀 Quick Start\n\n### Installation\n\n```bash\ngo get github.com/ImGajeed76/charmer/pkg/charmer@latest\n```\n\n### Setup Your Project\n\n1. Create your `main.go`:\n\n```go\n//go:generate go run github.com/ImGajeed76/charmer/tools/generate\n\npackage main\n\nimport (\n\t\"your-project/internal/registry\"\n\t\"github.com/ImGajeed76/charmer/pkg/charmer\"\n)\n\nfunc main() {\n\tcharmer.Run(registry.RegisteredCharms)\n}\n```\n\n2. Run the Generate command:\n\n```bash\ngo generate\n```\n\n> If you didn't already create a `charms` directory, the generate command will create one for you with a sample\n`greeting.go` file.\n\n### Build & Run\n\n1. Generate the TUI code:\n\n```bash\ngo generate\n```\n\n2. Run your application:\n\n```bash\ngo run main.go\n```\n\nOr build an executable:\n\n```bash\ngo build\n```\n\nFor detailed usage instructions and examples, visit our [documentation](https://ImGajeed76.github.io/charmer).\n\n## 🎨 How It Works\n\nCharmer uses a annotation-based approach to create TUIs:\n\n1. Add `@Charm` annotations to your functions\n2. Define titles and descriptions using `@Title` and `@Description` (Descriptions can be multiline)\n3. Run `go generate` to create the TUI structure\n4. Charmer handles the rest - navigation, UI rendering, and execution\n\n## 📁 Project Structure\n\n```\nyour-project/\n├── main.go\n└── charms/\n    ├── greeting.go\n    └── other_commands.go\n```\n\n## 🛠️ Development Status\n\n⚠️ **Early Alpha Stage**\n\nThis project is currently in early development. Features and APIs may change significantly. The current version might\nnot be fully functional as package publishing is still being configured.\n\n## 📝 License\n\nThis project is licensed under the GNU General Public License v3.0 - see the [LICENSE](LICENSE) file for details.\n\n## 💖 Acknowledgments\n\n- Built with ❤️ in Switzerland by ImGajeed76\n- Powered by the amazing [Charm](https://github.com/charmbracelet) libraries\n\n---\n\n🌟 **Purpose**: Simplifying the creation of beautiful terminal utility applications, one function at a time.\n\n⚠️ **Note**: This is an alpha release. Expect changes and improvements as the project evolves.\n\nNeed help? Check our [documentation](https://ImGajeed76.github.io/charmer) or open an issue on GitHub.",
    "license": {
      "name": "GNU General Public License v3.0",
      "text": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.",
      "spdxId": "GPL-3.0",
      "url": "https://api.github.com/licenses/gpl-3.0"
    },
    "stats": {
      "stars": 1,
      "forks": 0,
      "watchers": 1,
      "openIssues": 2,
      "lastUpdated": "2025-10-23T16:48:56Z",
      "createdAt": "2025-02-15T22:32:01Z",
      "size": 925,
      "language": "Go",
      "languages": [
        {
          "name": "Go",
          "bytes": 229086,
          "percentage": 100,
          "color": "#00ADD8"
        }
      ]
    },
    "platform": {
      "type": "github",
      "url": "https://github.com/ImGajeed76/charmer",
      "apiAvailable": true
    },
    "writtenAt": "2025-10-21T00:00:00.000Z",
    "updatedAt": "2025-10-21T00:00:00.000Z"
  },
  {
    "title": "BFScript",
    "portfolioUrl": "/projects/bfscript",
    "repoUrl": "https://github.com/ImGajeed76/bfscript",
    "liveUrl": "https://bfscript.streamlit.app/",
    "description": "BFScript is a compiler written in Python that translates a familiar, C-inspired syntax into notoriously minimalistic\nBrainfuck code. It aims to make developing complex Brainfuck programs more feasible by providing higher-level\nabstractions.",
    "role": "Creator",
    "technologies": [
      "Python",
      "Lark",
      "Compiler Design"
    ],
    "status": "Active",
    "content": "# BFScript: Bridging the Gap Between Readability and Brainfuck\n\n## The Idea: What It Is and Why I Built It\n\nEver since I first encountered esoteric programming languages, Brainfuck stood out. Its extreme minimalism was\nfascinating, but also intimidating. It's Turing complete, meaning *theoretically* you can compute anything with it, but\n*practically*, writing or reading anything beyond simple examples is incredibly difficult. The idea of simplifying this\nprocess got stuck in my head.\n\nThis led me to create BFScript: a compiler that takes code written in a simpler, C-like syntax and translates it into\nfunctional Brainfuck code.\n\nMy initial attempt was a different project,\nthe [Brainfuck Transpiler](https://github.com/ImGajeed76/brainfuck_transpiler). However, I soon realized that approach\nhad fundamental limitations and wasn't truly Turing complete. It couldn't handle the complexity I envisioned. So, I\ndecided to start over with a more robust compiler approach, which became BFScript.\n\nPrimarily, this is a passion project exploring compiler design in a severely constrained environment—how do you build a\nusable language when your target has no stack, no registers, and only 8 instructions? It's for me, for the fun of\ntackling a weird challenge, and maybe for anyone else intrigued by the intersection of conventional programming and\nesoteric languages.\n\n**What is Brainfuck, Anyway?**\n\nBefore diving into BFScript, it helps to understand the target language. Brainfuck uses only eight simple commands to\nmanipulate a tape of memory cells:\n\n| Command | Description                        |\n|:--------|:-----------------------------------|\n| `>`     | Increment the data pointer.        |\n| `<`     | Decrement the data pointer.        |\n| `+`     | Increment the byte at the pointer. |\n| `-`     | Decrement the byte at the pointer. |\n| `.`     | Output the byte at the pointer.    |\n| `,`     | Input a byte to the pointer.       |\n| `[`     | Jump forward if byte is zero.      |\n| `]`     | Jump backward if byte is non-zero. |\n\nA simple \"Hello World!\" in Brainfuck looks like this:\n\n```bf\n++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.\n```\n\nAs you can see, readability isn't its strong suit. BFScript aims to fix that!\n\n## The Journey: From Concept to Reality\n\nAfter hitting the limits with the simple transpiler, I knew I needed a more structured approach for BFScript. I decided\nto build a proper compiler using Python.\n\nThe key technology choices were:\n\n1. **Python:** I chose Python because I'm comfortable with it, and it has excellent string manipulation capabilities and\n   libraries, which are crucial for code generation. Its readability also helps manage the compiler's complexity.\n2. **Lark (Parsing Library):** Instead of writing a parser from scratch, I used Lark. It allows defining the grammar of\n   the BFScript language in a clean way and automatically generates a parser that turns BFScript code into a structured\n   tree (Abstract Syntax Tree - AST). This saved a massive amount of effort and let me focus on the harder part:\n   translation.\n\nThe compilation process generally involves:\n\n1. **Parsing:** Lark reads the BFScript code (`.bfs` file) and validates its syntax, creating an AST.\n2. **Code Generation:** My Python code walks through this AST. For each node (like a variable declaration, `while` loop,\n   `output` call), it generates the corresponding sequence of Brainfuck commands. This involves figuring out how to\n   manage Brainfuck's memory tape to represent variables and control flow.\n\nThe BFScript language itself evolved to include features essential for non-trivial programs:\n\n* Variables (`size_t name = value;`)\n* Arithmetic (`+`, `-`)\n* Loops (`while (condition) { ... }`)\n* Basic I/O (`output('A');`, `output(variable);`)\n\nHere's an example of BFScript code that prints a pyramid, showcasing its readability compared to raw Brainfuck:\n\n```c\n// --- Pyramid Printer ---\n// Prints a pyramid of '*' characters using nested loops.\n\nsize_t height = 7; // Declare and initialize a variable\n\nsize_t current_row = 1;\nsize_t chars_for_this_row = 1;\n\n// Loop for each row\nwhile (current_row <= height) {\n\n    // --- Print leading spaces ---\n    size_t spaces_needed = height - current_row;\n    size_t spaces_printed = 0;\n    while (spaces_printed < spaces_needed) {\n        output(' '); // Output a character literal\n        spaces_printed = spaces_printed + 1;\n    }\n\n    // --- Print the characters ('*') ---\n    size_t chars_printed = 0;\n    while (chars_printed < chars_for_this_row) {\n        output('*');\n        chars_printed = chars_printed + 1;\n    }\n\n    // --- Print a newline character ---\n    output('\\n');\n\n    // --- Prepare for the next row ---\n    current_row = current_row + 1;\n    // Add 2 characters for the next row (1 -> 3 -> 5 -> ...)\n    chars_for_this_row = chars_for_this_row + 2;\n}\n```\n\nThis is much easier to understand and maintain!\n\n## How It Actually Works: The Technical Bits\n\nOkay, so the interesting part isn't just *that* it compiles to Brainfuck—it's *how*. I had to solve some genuinely\ntricky problems to make this work, and honestly, I'm pretty proud of the solutions I came up with.\n\n### The Code Generation Pattern: Functions All The Way Down\n\nHere's the thing I figured out early on: I couldn't just immediately spit out Brainfuck strings as I walked the AST.\nWhy? Because when you're parsing something like `a + b`, you don't yet know *where* the result needs to go. Maybe it's\ngoing into a variable. Maybe it's being output directly. Maybe it's part of a bigger expression like `(a + b) * c`.\n\nSo instead, I built a system where every expression returns a Python function—a `code_func`—that generates the actual\nBrainfuck code when you call it:\n\n```python\ndef code_func(result_cell):\n    c = []\n    # Generate BF instructions that put the result in result_cell\n    return c\n```\n\nThis `result_cell` parameter is the key. It lets me decide *later* where the result should end up. When I finally know\nthe context (like \"store this in variable X\"), I call the function and pass in the destination cell.\n\nFor something like `a + b * c`, these functions nest naturally:\n\n1. Parse `b * c` → get back a `code_func_mult`\n2. Parse `a + ...` → create a new `code_func_add` that *calls* `code_func_mult` internally\n3. When I finally execute this chain, it recursively generates the right BF code in the right order\n\nI later found out this is similar to something called \"tagless final\" from programming language research, which was kind\nof validating—I'd reinvented a real technique without knowing it existed.\n\n### Memory Management: Keeping Track of the Tape\n\nBrainfuck's tape is your only storage. No stack, no heap, just cells stretching out in both directions. I needed a way\nto manage this sanely.\n\nVariables get permanent locations—each `size_t` gets assigned a specific cell number and stays there. But temporary\ncalculations (like the intermediate result of `b * c` in `a + b * c`) need *temporary* cells that get cleaned up after\nuse.\n\nI built a `MemoryManager` class with a pool of temp cells (0–19 by default):\n\n```python\nclass MemoryManager:\n    def get_temp_cell(self):\n        if not self.temp_cell_pool:\n            raise MemoryError(\"Out of temporary cells!\")\n        return self.temp_cell_pool.pop(0)\n    \n    def release_temp_cell(self, cell):\n        self.temp_cell_pool.insert(0, cell)  # LIFO reuse\n```\n\nThe LIFO (last-in-first-out) reuse pattern is intentional—recently freed cells get reused first, which keeps the data\npointer from wandering all over the tape. It's basically register allocation for a tape machine.\n\nIf you run out of temp cells, the compiler throws an error instead of silently corrupting memory. Better to fail loudly\nthan generate broken code.\n\n### Control Flow: Making Loops and Ifs Work\n\nThis was the hardest part. Brainfuck only has `[...]` (loop while cell ≠ 0). No `if`/`else`, no `break`, no labels you\ncan jump to. And every operation can move the data pointer, so if you're not careful, you'll end up in the wrong place\nand everything breaks.\n\nMy solution was to build abstractions that enforce pointer discipline. For example, here's `loop_managed`:\n\n```python\ndef loop_managed(self, condition_cell, loop_func):\n    code = self.move_to_cell(condition_cell)\n    code += self.open_brace()  # [\n    code += loop_func()  # Execute the loop body (might move pointer)\n    code += self.move_to_cell(condition_cell)  # Force pointer back\n    code += self.close_brace()  # ]\n    return code\n```\n\nThe key insight: after the loop body runs, *explicitly* move the pointer back to the condition cell. This prevents\npointer drift bugs where the loop breaks because you're checking the wrong cell.\n\nFor `if/else`, it's trickier. I copy the condition to a temp cell, then use `[...]` to run the if-branch. For the\nelse-branch, I set a flag beforehand and clear it if the if-branch runs—then I use another `[...]` to check if the flag\nis still set. It's hacky but it works.\n\n### Comparisons: The Countdown Algorithm\n\nYou can't just check if `a > b` in Brainfuck. No comparison instructions exist. So I had to get creative.\n\nMy solution for `greater_than`:\n\n1. Copy `a` and `b` to temporary cells (let's call them `temp1` and `temp2`)\n2. Loop: decrement both `temp1` and `temp2` by 1 each iteration\n3. If `temp2` hits zero first, then `a > b` (set result to 1)\n4. If `temp1` hits zero first or they hit zero together, then `a ≤ b` (result stays 0)\n\nIt's essentially simulating a comparison by counting down both numbers in parallel and seeing which runs out first. Not\nthe most efficient algorithm, but it works and it's provably correct.\n\nSimilar logic applies to `<`, `==`, etc. Each comparison has its own little algorithm.\n\n### Why This Matters\n\nI didn't find tutorials for any of this. The problem space—compiling a C-like language to Brainfuck with complex\nexpressions and control flow—basically doesn't exist elsewhere. These patterns emerged from trial and error, trying to\nkeep the compiler maintainable as I added features.\n\nThe closure-based approach especially felt like a breakthrough moment. It made composition natural, prevented a ton of\nbugs, and kept the code surprisingly clean considering what it's doing.\n\n## Navigating Challenges: Hurdles and Solutions\n\nThis project was definitely challenging, pushing me to learn quite a bit.\n\n* **Technical Challenges:**\n    * **Brainfuck Logic:** The biggest hurdle was figuring out *how* to translate higher-level concepts into Brainfuck.\n      How do you represent variables on the tape? How do you implement `while` loops or arithmetic efficiently using\n      only `+`, `-`, `<`, `>`, `[`, `]`? This required studying Brainfuck programming techniques and designing specific\n      Brainfuck \"subroutines\" for common operations. Managing the data pointer (`<`, `>`) effectively to avoid\n      unnecessary movement was also tricky.\n    * **Compiler Complexity:** Designing the compiler structure itself, ensuring the generated Brainfuck code was\n      correct for all language features and their combinations, was complex. Debugging the *output* Brainfuck code was\n      particularly difficult, as Brainfuck gives you very little feedback when something goes wrong.\n    * **AI Wasn't Much Help:** I tried using AI assistants early on, but this problem is niche enough that they couldn't\n      really guide me. There's no big corpus of \"C-to-Brainfuck compiler\" code for them to learn from. This forced me to\n      think through the logic myself, which honestly made the learning experience better.\n* **Non-Technical Challenges:** Mostly time management and staying motivated on a project that's complex and doesn't\n  have an immediate practical application outside of the learning experience itself.\n\n* **Solutions:**\n    * I tackled the Brainfuck logic by breaking problems down. I'd figure out how to implement a small piece (like\n      adding two numbers stored at specific tape locations) and then build upon that.\n    * Using the Lark library significantly simplified the parsing stage, letting me focus on the translation logic.\n    * Lots of trial-and-error, testing small BFScript snippets, and examining the generated Brainfuck code helped iron\n      out bugs.\n\n## The Outcome: Where It Stands and What I Learned\n\nBFScript is currently functional and usable. You can write programs like the pyramid example above and compile them into\nworking Brainfuck code. While there's always room for improvement and more features (some edge cases in conditionals are\nstill buggy, and I'm not going back to debug that nightmare), I'm happy with its current state as a proof-of-concept and\na learning tool.\n\n* **Goals Achieved:** Yes, the main goal of creating a compiler that translates a C-like syntax into Turing-complete\n  Brainfuck, overcoming the limitations of my previous transpiler, was met.\n* **Key Learnings:**\n    * A *lot* about compiler fundamentals (parsing, ASTs, code generation).\n    * Deep appreciation for the challenges of working in highly constrained environments like Brainfuck.\n    * How to map high-level programming constructs to low-level operations.\n    * The value of using good tools and libraries (like Lark).\n    * Problem-solving and debugging techniques for unconventional code.\n    * That I could design compiler patterns independently that turn out to mirror real academic research.\n* **Proudest Aspect:** Honestly, the closure-based code generation system. It emerged organically as I tried to handle\n  nested expressions, and realizing later that it's similar to patterns from academic PL research (tagless final) was\n  really validating. That \"independent discovery\" moment felt great.\n* **Future Ideas:** While not actively planned, I've considered exploring optimizations for the generated Brainfuck\n  code (making it shorter or faster—there's definitely redundant `+-<>` sequences I could collapse). The idea of using\n  LLVM Intermediate Representation (IR) as a source, allowing potentially *any* language that compiles to LLVM to be\n  compiled to Brainfuck, is also an interesting, though very ambitious, future thought experiment.",
    "readme": "# BrainfuckScript 🧠💻➡️🤯\n\n[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n\n**Compile a C-like language directly into Brainfuck!**\n\n🌐 **Try it online:** https://bfscript.streamlit.app/\n\nBrainfuckScript is a compiler written in Python that translates a more familiar, C-inspired syntax into notoriously\nminimalistic Brainfuck code. It aims to make developing complex Brainfuck programs feasible by providing higher-level\nabstractions like variables, loops, and conditional statements.\n\nThis project uses a 32-bit cell architecture for the target Brainfuck environment, allowing for larger numerical values\ncompared to the traditional 8-bit model.\n\n## 🤔 What is Brainfuck?\n\nBefore diving into BrainfuckScript, it helps to understand what it compiles *to*. Brainfuck is an esoteric programming\nlanguage known for its extreme minimalism. It consists of only eight commands:\n\n| Command | Description                        |\n|:--------|:-----------------------------------|\n| `>`     | Increment the data pointer.        |\n| `<`     | Decrement the data pointer.        |\n| `+`     | Increment the byte at the pointer. |\n| `-`     | Decrement the byte at the pointer. |\n| `.`     | Output the byte at the pointer.    |\n| `,`     | Input a byte to the pointer.       |\n| `[`     | Jump forward if byte is zero.      |\n| `]`     | Jump backward if byte is non-zero. |\n\nA simple \"Hello World!\" program in Brainfuck looks something like this:\n\n```bf\n++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.\n```\n\nAs you can see, writing anything non-trivial directly in Brainfuck is a significant challenge. BrainfuckScript bridges\nthis gap!\n\n## ✨ Key Features\n\n* **C-like Syntax:** Write code using familiar constructs like variables (`size_t`), `if`/`else`, `while` loops, and\n  basic arithmetic.\n* **Brainfuck Compilation:** Generates functional Brainfuck code as output.\n* **32-Bit Cells:** Targets a Brainfuck environment with 32-bit cells, enabling larger numbers.\n* **Python Implementation:** Built with modern Python (>=3.13) and Poetry.\n* **Lark Parser:** Uses the Lark library for robust parsing based on a defined grammar.\n* **Included Interpreter:** Comes with a basic Brainfuck interpreter (also using 32-bit cells) to run the compiled code.\n\n## 🚀 Getting Started\n\n### Prerequisites\n\n* **Python:** Version 3.13 or higher.\n* **Poetry:** A Python dependency management tool. ([Installation Guide](https://python-poetry.org/docs/#installation))\n\n### Installation\n\n1. **Clone the repository:**\n   ```bash\n   git clone https://github.com/ImGajeed76/bfscript.git\n   ```\n2. **Navigate to the project directory:**\n   ```bash\n   cd bfscript\n   ```\n3. **Install dependencies using Poetry:**\n   ```bash\n   poetry install\n   ```\n\n## 🛠️ Usage\n\n### Web Version\n\nYou can also use BrainfuckScript directly in your browser at **https://bfscript.streamlit.app/**\n\n### Compiling BrainfuckScript (`.bfs`) to Brainfuck (`.bf`)\n\nUse the `compiler.py` script to translate your BrainfuckScript code:\n\n```bash\npoetry run python compiler.py <input_file.bfs> <output_file.bf>\n```\n\n**Example:**\n\n```bash\npoetry run python compiler.py examples/pyramid.bfs pyramid.bf\n```\n\nThis will read the code in `examples/pyramid.bfs` and write the compiled Brainfuck code to `pyramid.bf`.\n\n### Running Compiled Brainfuck Code (`.bf`)\n\nUse the included `interpreter.py` to execute the generated Brainfuck code:\n\n```bash\npoetry run python interpreter.py <brainfuck_file.bf>\n```\n\n**Example:**\n\n```bash\npoetry run python interpreter.py pyramid.bf\n```\n\nThis will run the Brainfuck code stored in `pyramid.bf`.\n\n**With Input:**\n\nIf your Brainfuck code requires input, you can provide it like this:\n\n```bash\npoetry run python interpreter.py pyramid.bf \"Some input\"\n```\n\n**Other Options:**\n\n```bash\npoetry run python interpreter.py your_script.bf \"Input\" -m 60000 -b 8 -t 10.0\n```\n\n| Option | Description                                 |\n|:-------|:--------------------------------------------|\n| `-m`   | Set the memory size (default: 30000 cells). |\n| `-b`   | Set the cell size in bits (default: 32).    |\n| `-t`   | Set the timeout in seconds (default: 5.0).  |\n\n## 📝 Syntax Example\n\nBrainfuckScript uses a syntax reminiscent of C. Here's an example that prints a pyramid pattern:\n\n```c\n// --- Pyramid Printer ---\n// Prints a pyramid of '*' characters using nested loops.\n// Avoids multiplication by incrementing the character count per row.\n\nsize_t height = 7; // Declare and initialize a variable\n\nsize_t current_row = 1;\nsize_t chars_for_this_row = 1;\n\n// Loop for each row\nwhile (current_row <= height) {\n\n    // --- Print leading spaces ---\n    size_t spaces_needed = height - current_row;\n    size_t spaces_printed = 0;\n\n    while (spaces_printed < spaces_needed) {\n        output(' '); // Output a character literal\n        spaces_printed = spaces_printed + 1;\n    }\n\n    // --- Print the characters ('*') ---\n    size_t chars_printed = 0;\n    while (chars_printed < chars_for_this_row) {\n        output('*');\n        chars_printed = chars_printed + 1;\n    }\n\n    // --- Print a newline character ---\n    output('\\n');\n\n    // --- Prepare for the next row ---\n    current_row = current_row + 1;\n    // Add 2 characters for the next row (1 -> 3 -> 5 -> ...)\n    chars_for_this_row = chars_for_this_row + 2;\n}\n\n// No explicit return needed for top-level code\n```\n\n## 🚧 Current Status & Limitations\n\nThis project is currently under development. The following features are **not yet implemented**:\n\n* ❌ **Variable Multiplication (`*`)**: Multiplication involving two variables is not supported. Constant folding works (\n  e.g., `5 * 2`).\n* ❌ **Variable Division (`/`)**: Division involving two variables is not supported. Constant folding works (e.g.,\n  `10 / 2`).\n* ❌ **Functions**: Defining and calling custom functions (`void myFunc() { ... }`) is not yet implemented.\n* ❌ **Stacks**: The `stack` data type and its associated operations (`.push()`, `.pop()`, `.peek()`) are not yet\n  implemented.\n\nThese features are planned for future development!\n\n## 🤝 Contributing\n\nContributions, issues, and feature requests are welcome! Feel free to check\nthe [issues page](https://github.com/ImGajeed76/bfscript/issues). Please open an issue first to discuss what you would\nlike to change.\n\n## 📜 License\n\nThis project is licensed under the **GNU General Public License v3.0**. See the [LICENSE](LICENSE) file for details.\n\n---\n\nHappy Brainfucking (the easier way)! 🎉",
    "license": {
      "name": "GNU General Public License v3.0",
      "text": "# GNU GENERAL PUBLIC LICENSE\n\nVersion 3, 29 June 2007\n\nCopyright (C) 2007 Free Software Foundation, Inc.\n<https://fsf.org/>\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n## Preamble\n\nThe GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\nThe licenses for most software and other practical works are designed\nto take away your freedom to share and change the works. By contrast,\nthe GNU General Public License is intended to guarantee your freedom\nto share and change all versions of a program--to make sure it remains\nfree software for all its users. We, the Free Software Foundation, use\nthe GNU General Public License for most of our software; it applies\nalso to any other work released this way by its authors. You can apply\nit to your programs, too.\n\nWhen we speak of free software, we are referring to freedom, not\nprice. Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\nTo protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights. Therefore, you\nhave certain responsibilities if you distribute copies of the\nsoftware, or if you modify it: responsibilities to respect the freedom\nof others.\n\nFor example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received. You must make sure that they, too, receive\nor can get the source code. And you must show them these terms so they\nknow their rights.\n\nDevelopers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\nFor the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software. For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\nSome devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the\nmanufacturer can do so. This is fundamentally incompatible with the\naim of protecting users' freedom to change the software. The\nsystematic pattern of such abuse occurs in the area of products for\nindividuals to use, which is precisely where it is most unacceptable.\nTherefore, we have designed this version of the GPL to prohibit the\npractice for those products. If such problems arise substantially in\nother domains, we stand ready to extend this provision to those\ndomains in future versions of the GPL, as needed to protect the\nfreedom of users.\n\nFinally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish\nto avoid the special danger that patents applied to a free program\ncould make it effectively proprietary. To prevent this, the GPL\nassures that patents cannot be used to render the program non-free.\n\nThe precise terms and conditions for copying, distribution and\nmodification follow.\n\n## TERMS AND CONDITIONS\n\n### 0. Definitions.\n\n\"This License\" refers to version 3 of the GNU General Public License.\n\n\"Copyright\" also means copyright-like laws that apply to other kinds\nof works, such as semiconductor masks.\n\n\"The Program\" refers to any copyrightable work licensed under this\nLicense. Each licensee is addressed as \"you\". \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\nTo \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of\nan exact copy. The resulting work is called a \"modified version\" of\nthe earlier work or a work \"based on\" the earlier work.\n\nA \"covered work\" means either the unmodified Program or a work based\non the Program.\n\nTo \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy. Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\nTo \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies. Mere interaction with a user\nthrough a computer network, with no transfer of a copy, is not\nconveying.\n\nAn interactive user interface displays \"Appropriate Legal Notices\" to\nthe extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License. If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n### 1. Source Code.\n\nThe \"source code\" for a work means the preferred form of the work for\nmaking modifications to it. \"Object code\" means any non-source form of\na work.\n\nA \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\nThe \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form. A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\nThe \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities. However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work. For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\nThe Corresponding Source need not include anything that users can\nregenerate automatically from other parts of the Corresponding Source.\n\nThe Corresponding Source for a work in source code form is that same\nwork.\n\n### 2. Basic Permissions.\n\nAll rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met. This License explicitly affirms your unlimited\npermission to run the unmodified Program. The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work. This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\nYou may make, run and propagate covered works that you do not convey,\nwithout conditions so long as your license otherwise remains in force.\nYou may convey covered works to others for the sole purpose of having\nthem make modifications exclusively for you, or provide you with\nfacilities for running those works, provided that you comply with the\nterms of this License in conveying all material for which you do not\ncontrol copyright. Those thus making or running the covered works for\nyou must do so exclusively on your behalf, under your direction and\ncontrol, on terms that prohibit them from making any copies of your\ncopyrighted material outside their relationship with you.\n\nConveying under any other circumstances is permitted solely under the\nconditions stated below. Sublicensing is not allowed; section 10 makes\nit unnecessary.\n\n### 3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\nNo covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\nWhen you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such\ncircumvention is effected by exercising rights under this License with\nrespect to the covered work, and you disclaim any intention to limit\noperation or modification of the work as a means of enforcing, against\nthe work's users, your or third parties' legal rights to forbid\ncircumvention of technological measures.\n\n### 4. Conveying Verbatim Copies.\n\nYou may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\nYou may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n### 5. Conveying Modified Source Versions.\n\nYou may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these\nconditions:\n\n-   a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n-   b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under\n    section 7. This requirement modifies the requirement in section 4\n    to \"keep intact all notices\".\n-   c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy. This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged. This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n-   d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\nA compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit. Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n### 6. Conveying Non-Source Forms.\n\nYou may convey a covered work in object code form under the terms of\nsections 4 and 5, provided that you also convey the machine-readable\nCorresponding Source under the terms of this License, in one of these\nways:\n\n-   a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n-   b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the Corresponding\n    Source from a network server at no charge.\n-   c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source. This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n-   d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge. You need not require recipients to copy the\n    Corresponding Source along with the object code. If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source. Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n-   e) Convey the object code using peer-to-peer transmission,\n    provided you inform other peers where the object code and\n    Corresponding Source of the work are being offered to the general\n    public at no charge under subsection 6d.\n\nA separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\nA \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal,\nfamily, or household purposes, or (2) anything designed or sold for\nincorporation into a dwelling. In determining whether a product is a\nconsumer product, doubtful cases shall be resolved in favor of\ncoverage. For a particular product received by a particular user,\n\"normally used\" refers to a typical or common use of that class of\nproduct, regardless of the status of the particular user or of the way\nin which the particular user actually uses, or expects or is expected\nto use, the product. A product is a consumer product regardless of\nwhether the product has substantial commercial, industrial or\nnon-consumer uses, unless such uses represent the only significant\nmode of use of the product.\n\n\"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to\ninstall and execute modified versions of a covered work in that User\nProduct from a modified version of its Corresponding Source. The\ninformation must suffice to ensure that the continued functioning of\nthe modified object code is in no case prevented or interfered with\nsolely because modification has been made.\n\nIf you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information. But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\nThe requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or\nupdates for a work that has been modified or installed by the\nrecipient, or for the User Product in which it has been modified or\ninstalled. Access to a network may be denied when the modification\nitself materially and adversely affects the operation of the network\nor violates the rules and protocols for communication across the\nnetwork.\n\nCorresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n### 7. Additional Terms.\n\n\"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law. If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\nWhen you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit. (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.) You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\nNotwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders\nof that material) supplement the terms of this License with terms:\n\n-   a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n-   b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n-   c) Prohibiting misrepresentation of the origin of that material,\n    or requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n-   d) Limiting the use for publicity purposes of names of licensors\n    or authors of the material; or\n-   e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n-   f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions\n    of it) with contractual assumptions of liability to the recipient,\n    for any liability that these contractual assumptions directly\n    impose on those licensors and authors.\n\nAll other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10. If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term. If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\nIf you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\nAdditional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions; the\nabove requirements apply either way.\n\n### 8. Termination.\n\nYou may not propagate or modify a covered work except as expressly\nprovided under this License. Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\nHowever, if you cease all violation of this License, then your license\nfrom a particular copyright holder is reinstated (a) provisionally,\nunless and until the copyright holder explicitly and finally\nterminates your license, and (b) permanently, if the copyright holder\nfails to notify you of the violation by some reasonable means prior to\n60 days after the cessation.\n\nMoreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\nTermination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License. If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n### 9. Acceptance Not Required for Having Copies.\n\nYou are not required to accept this License in order to receive or run\na copy of the Program. Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance. However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work. These actions infringe copyright if you do\nnot accept this License. Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n### 10. Automatic Licensing of Downstream Recipients.\n\nEach time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License. You are not responsible\nfor enforcing compliance by third parties with this License.\n\nAn \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations. If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\nYou may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License. For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n### 11. Patents.\n\nA \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based. The\nwork thus licensed is called the contributor's \"contributor version\".\n\nA contributor's \"essential patent claims\" are all patent claims owned\nor controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version. For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\nEach contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\nIn the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement). To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\nIf you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients. \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\nIf, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\nA patent license is \"discriminatory\" if it does not include within the\nscope of its coverage, prohibits the exercise of, or is conditioned on\nthe non-exercise of one or more of the rights that are specifically\ngranted under this License. You may not convey a covered work if you\nare a party to an arrangement with a third party that is in the\nbusiness of distributing software, under which you make payment to the\nthird party based on the extent of your activity of conveying the\nwork, and under which the third party grants, to any of the parties\nwho would receive the covered work from you, a discriminatory patent\nlicense (a) in connection with copies of the covered work conveyed by\nyou (or copies made from those copies), or (b) primarily for and in\nconnection with specific products or compilations that contain the\ncovered work, unless you entered into that arrangement, or that patent\nlicense was granted, prior to 28 March 2007.\n\nNothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n### 12. No Surrender of Others' Freedom.\n\nIf conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License. If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under\nthis License and any other pertinent obligations, then as a\nconsequence you may not convey it at all. For example, if you agree to\nterms that obligate you to collect a royalty for further conveying\nfrom those to whom you convey the Program, the only way you could\nsatisfy both those terms and this License would be to refrain entirely\nfrom conveying the Program.\n\n### 13. Use with the GNU Affero General Public License.\n\nNotwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work. The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n### 14. Revised Versions of this License.\n\nThe Free Software Foundation may publish revised and/or new versions\nof the GNU General Public License from time to time. Such new versions\nwill be similar in spirit to the present version, but may differ in\ndetail to address new problems or concerns.\n\nEach version is given a distinguishing version number. If the Program\nspecifies that a certain numbered version of the GNU General Public\nLicense \"or any later version\" applies to it, you have the option of\nfollowing the terms and conditions either of that numbered version or\nof any later version published by the Free Software Foundation. If the\nProgram does not specify a version number of the GNU General Public\nLicense, you may choose any version ever published by the Free\nSoftware Foundation.\n\nIf the Program specifies that a proxy can decide which future versions\nof the GNU General Public License can be used, that proxy's public\nstatement of acceptance of a version permanently authorizes you to\nchoose that version for the Program.\n\nLater license versions may give you additional or different\npermissions. However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n### 15. Disclaimer of Warranty.\n\nTHERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT\nWARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND\nPERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE\nDEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR\nCORRECTION.\n\n### 16. Limitation of Liability.\n\nIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR\nCONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES\nARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT\nNOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR\nLOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM\nTO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER\nPARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\n### 17. Interpretation of Sections 15 and 16.\n\nIf the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\nEND OF TERMS AND CONDITIONS\n\n## How to Apply These Terms to Your New Programs\n\nIf you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\nTo do so, attach the following notices to the program. It is safest to\nattach them to the start of each source file to most effectively state\nthe exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n        <one line to give the program's name and a brief idea of what it does.>\n        Copyright (C) <year>  <name of author>\n\n        This program is free software: you can redistribute it and/or modify\n        it under the terms of the GNU General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version.\n\n        This program is distributed in the hope that it will be useful,\n        but WITHOUT ANY WARRANTY; without even the implied warranty of\n        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n        GNU General Public License for more details.\n\n        You should have received a copy of the GNU General Public License\n        along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper\nmail.\n\nIf the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n        <program>  Copyright (C) <year>  <name of author>\n        This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n        This is free software, and you are welcome to redistribute it\n        under certain conditions; type `show c' for details.\n\nThe hypothetical commands \\`show w' and \\`show c' should show the\nappropriate parts of the General Public License. Of course, your\nprogram's commands might be different; for a GUI interface, you would\nuse an \"about box\".\n\nYou should also get your employer (if you work as a programmer) or\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary. For more information on this, and how to apply and follow\nthe GNU GPL, see <https://www.gnu.org/licenses/>.\n\nThe GNU General Public License does not permit incorporating your\nprogram into proprietary programs. If your program is a subroutine\nlibrary, you may consider it more useful to permit linking proprietary\napplications with the library. If this is what you want to do, use the\nGNU Lesser General Public License instead of this License. But first,\nplease read <https://www.gnu.org/licenses/why-not-lgpl.html>.",
      "spdxId": "GPL-3.0",
      "url": "https://api.github.com/licenses/gpl-3.0"
    },
    "stats": {
      "stars": 4,
      "forks": 0,
      "watchers": 4,
      "openIssues": 0,
      "lastUpdated": "2025-10-16T21:55:46Z",
      "createdAt": "2025-04-01T14:14:04Z",
      "size": 103,
      "language": "Python",
      "languages": [
        {
          "name": "Python",
          "bytes": 116520,
          "percentage": 100,
          "color": "#3572A5"
        }
      ]
    },
    "platform": {
      "type": "github",
      "url": "https://github.com/ImGajeed76/bfscript",
      "apiAvailable": true
    },
    "writtenAt": "2025-10-21T00:00:00.000Z",
    "updatedAt": "2025-10-21T00:00:00.000Z"
  },
  {
    "title": "Axogen",
    "portfolioUrl": "/projects/axogen",
    "repoUrl": "https://github.com/axonotes/axogen",
    "liveUrl": "https://axonotes.github.io/axogen/",
    "description": "Axogen is a TypeScript-native configuration system that unifies typed environment variables, code generation, and task\nmanagement for any project in any language, prioritizing type safety and developer experience over the scattered .env\nfile chaos.",
    "role": "Creator",
    "technologies": [
      "TypeScript",
      "Zod",
      "Node.js",
      "Nunjucks",
      "Handlebars"
    ],
    "status": "Active",
    "content": "# Axogen: Building a TypeScript-Native Config System Because .env Files Drive Me Crazy\n\n## The Idea: What It Is and Why I Built It\n\nAxogen is a configuration management tool that lets you define everything once in TypeScript and generate multiple\nconfig formats automatically. You write your config in TypeScript with full type safety and Zod validation, and it spits\nout .env files, JSON configs, YAML files, Docker configs, Kubernetes manifests - whatever you need. The key difference\nfrom other tools: it validates everything before your app even starts, catching errors in milliseconds instead of\nwaiting for your app to crash 30 seconds into startup.\n\nThe whole thing started because I hit my absolute breaking point while working\non [AxonotesCore](https://github.com/axonotes/AxonotesCore). The project had grown into this nightmare of scattered\nconfiguration files - hardcoded URLs buried in package.json scripts, different ports scattered across multiple .env\nfiles, and the classic \"change one thing, forget to update it in three other places\" problem.\n\nThe moment I knew I had to build something was when I tried to show a new developer how to set up the project locally. I\nwatched them get confused, frustrated, and ultimately give up because our configuration was so scattered and\ninconsistent. That's when I realized: configuration shouldn't be this hard, and definitely shouldn't be a barrier to\nonboarding new people.\n\n## The Journey: From Frustration to Solution\n\nMy first attempt was actually just trying to clean up AxonotesCore's existing setup manually. But I quickly realized the\nproblem was fundamental - we had the same information (ports, URLs, database connections) repeated across different\nfiles in different formats, and there was no single source of truth.\n\nI chose **TypeScript** as the foundation because developers already know it, and I wanted real type safety. The key was\nintegrating **Zod** for schema validation - not just string replacement, but actual validation that catches invalid\nURLs, malformed base64, wrong number formats before anything gets generated.\n\nThe tech stack evolved to:\n\n* **TypeScript + Zod:** For the config definition and validation\n* **Template engines:** Nunjucks, Handlebars, Mustache support for complex config generation\n* **Universal file support:** 10+ formats for both reading and generating configs\n* **Command system:** Built-in task runner with nested commands and typed arguments\n\nHere's what a real config looks like:\n\n```typescript\nconst env = loadEnv(\n    z.object({\n        DATABASE_URL: z.url(),\n        API_PORT: z.coerce.number().default(3001),\n        WEB_PORT: z.coerce.number().default(3000),\n        NODE_ENV: z.enum([\"development\", \"staging\", \"production\"]).default(\"development\"),\n    })\n);\n\nexport default defineConfig({\n    targets: {\n        api: env({\n            path: \"api/.env\",\n            variables: {\n                DATABASE_URL: env.DATABASE_URL,\n                PORT: env.API_PORT,\n            },\n        }),\n        web: env({\n            path: \"web/.env.local\",\n            variables: {\n                NEXT_PUBLIC_API_URL: `http://localhost:${env.API_PORT}`,\n            },\n        }),\n    },\n});\n```\n\nChange `API_PORT` to 4000, run `axogen generate`, and every URL automatically updates. One source of truth, everything\nelse follows.\n\nThe workflow I ended up with works really well across my two development machines. Pull code, update `.env.axogen` with\nmy local secrets, run `axogen generate`, and everything just works. No hunting through files, no missing variables, no\ndebugging why services can't connect. When you run `axogen run dev`, it validates your config first - if something's\nmissing or wrong, you know immediately with a clear error message instead of waiting for your app to fail somewhere deep\nin the startup process.\n\n## Navigating Challenges: Hurdles and Solutions\n\nThe biggest challenge was **scope creep in the best way possible**. What started as a simple config generator kept\ngrowing because each problem I solved revealed another one.\n\n**Type Safety Evolution:** My initial API was pretty loose. I had to completely overhaul it to use dedicated functions\nfor each target type (`env()`, `json()`, `yaml()`) so TypeScript actually knows what you're doing and provides proper\nIntelliSense.\n\n**Secret Detection:** I realized people could accidentally push production API keys if Axogen generated them into\nnon-gitignored files. So I built automatic secret detection - if variables look like secrets (API keys, tokens, etc.)\nand the target file isn't gitignored, Axogen refuses to generate. You can override with `unsafe()` but you have to\nexplicitly say WHY it's safe.\n\n**Command System Complexity:** Simple string commands weren't enough. I ended up building a full nested command system\nthat supports everything from basic strings to complex command objects with help text, typed arguments, and custom\nlogic:\n\n```typescript\ncommands: {\n    \"dev:api\"\n:\n    `cd api && npm run dev --port ${env.API_PORT}`,\n        deploy\n:\n    cmd({\n        help: \"Deploy the application\",\n        options: {\n            environment: z.enum([\"staging\", \"production\"]).default(\"staging\"),\n        },\n        exec: async (ctx) => {\n            console.log(`🚀 Deploying to ${ctx.options.environment}...`);\n        },\n    }),\n}\n```\n\n**Performance was surprisingly not a problem** - I didn't implement any optimizations, but it generates 10,000 config\nfiles in about 2.2 seconds. Turns out when you're basically validating once and converting JSON to different formats,\nthings are naturally pretty fast.\n\n## The Outcome: Where It Stands and What I Learned\n\nAxogen is currently at v0.5.7 with 20 GitHub stars. It's functional and I've fully migrated AxonotesCore to use it, but\nit's definitely still evolving. The core vision is achieved though - you can define configuration once in TypeScript and\ngenerate any format you need with full type safety.\n\nOne important aspect: there's zero lock-in. The generated files are standard formats (.env, JSON, YAML) that work\nwithout Axogen. Don't like it? Just delete it and keep using the files. No migration needed, no vendor lock-in, the\nfiles are yours.\n\n**Key things I learned:**\n\n* **Developer experience really matters** - The console themes, colored output, and proper error messages aren't just\n  pretty, they make the tool genuinely enjoyable to use\n* **Type safety everywhere** - Using Zod for validation means no more silent failures. You get beautiful error messages\n  that actually help you fix problems\n* **Start simple, grow complex** - You can begin with basic configs and gradually add more sophisticated features as\n  needed\n* **Validation before execution** - Catching config errors in milliseconds before app startup is way more valuable than\n  I initially thought\n\nI'm most proud of the command system and the secret detection. Both solve real problems I've encountered, and they do it\nin a way that feels natural to use.\n\n**What's next:** Project initialization commands, better secrets management integration, and runtime loading\ncapabilities. The goal is becoming production-ready while keeping the developer experience that makes config management\nactually fun.\n\nThe project successfully bridges the gap between dotenv's simplicity and enterprise complexity. It's TypeScript-native\nbut works for any project in any language - Python APIs, Go microservices, Docker configs, Kubernetes manifests, all\nfrom one source of truth.\n\n## Links:\n\n* GitHub Repository: [https://github.com/axonotes/axogen](https://github.com/axonotes/axogen)\n* Documentation: [https://axonotes.github.io/axogen/](https://axonotes.github.io/axogen/)\n* NPM Package: [https://www.npmjs.com/package/@axonotes/axogen](https://www.npmjs.com/package/@axonotes/axogen)\n* Discord: [https://discord.gg/myBMaaDeQu](https://discord.gg/myBMaaDeQu)",
    "readme": "<p align=\"center\">\n  <a href=\"./\">\n    <img src=\"assets/axogen-typescript-zod.png\" alt=\"Axonotes Logo\" width=\"150\"/>\n  </a>\n</p>\n\n<h1 align=\"center\">Axogen</h1>\n\n<p align=\"center\">\n  <strong>TypeScript-native configuration system for <em>any project, any language</em></strong>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://axonotes.github.io/axogen/\">📖 Documentation</a> |\n  <a href=\"https://axonotes.github.io/axogen/docs/getting-started/\">🚀 Quick Start</a> |\n  <a href=\"https://discord.gg/myBMaaDeQu\">💬 Discord</a>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://www.npmjs.com/package/@axonotes/axogen\">\n    <img src=\"https://img.shields.io/npm/v/@axonotes/axogen?style=flat-square&color=blue\" alt=\"npm version\" />\n  </a>\n  <a href=\"https://www.npmjs.com/package/@axonotes/axogen\">\n    <img src=\"https://img.shields.io/npm/dm/@axonotes/axogen?style=flat-square&color=green\" alt=\"npm downloads\" />\n  </a>\n  <a href=\"https://github.com/axonotes/axogen/blob/main/LICENSE\">\n    <img src=\"https://img.shields.io/github/license/axonotes/axogen?style=flat-square\" alt=\"license\" />\n  </a>\n  <a href=\"https://github.com/axonotes/axogen/stargazers\">\n    <img src=\"https://img.shields.io/github/stars/axonotes/axogen?style=flat-square&color=yellow\" alt=\"stars\" />\n  </a>\n</p>\n\n---\n\n## The Problem\n\nYou know that moment when you change a port number and suddenly half your\nservices can't talk to each other? Or when you spend 20 minutes debugging only\nto realize you forgot to update the WebSocket URL in three different places?\n\nIn complex projects, configuration is scattered everywhere:\n\n```\nproject/\n├── api/.env                    # DATABASE_URL=postgres://...\n├── web/.env.local              # NEXT_PUBLIC_API_URL=http://...\n├── docker-compose.yml          # hardcoded ports and URLs\n├── k8s/configmap.yaml          # same values again\n└── package.json                # scripts with more hardcoded URLs\n```\n\nEvery time you change a database URL or add a service, you're hunting through\nmultiple files. Miss one? Good luck debugging why staging is broken.\n\n## The Solution\n\nDefine everything once in TypeScript, generate everywhere:\n\n```typescript\n// axogen.config.ts\nimport {defineConfig, loadEnv, env, json, group, cmd} from \"@axonotes/axogen\";\nimport {z} from \"zod\";\n\nconst config = loadEnv(\n    z.object({\n        DATABASE_URL: z.url(),\n        API_PORT: z.coerce.number().default(3001),\n        WEB_PORT: z.coerce.number().default(3000),\n        NODE_ENV: z\n            .enum([\"development\", \"staging\", \"production\"])\n            .default(\"development\"),\n    })\n);\n\nexport default defineConfig({\n    targets: {\n        api: env({\n            path: \"api/.env\",\n            variables: {\n                DATABASE_URL: config.DATABASE_URL,\n                PORT: config.API_PORT,\n                NODE_ENV: config.NODE_ENV,\n            },\n        }),\n        web: env({\n            path: \"web/.env.local\",\n            variables: {\n                NEXT_PUBLIC_API_URL: `http://localhost:${config.API_PORT}`,\n                NODE_ENV: config.NODE_ENV,\n            },\n        }),\n        docker: json({\n            path: \"docker-config.json\",\n            variables: {\n                apiPort: config.API_PORT,\n                webPort: config.WEB_PORT,\n                dbUrl: config.DATABASE_URL,\n            },\n        }),\n    },\n    commands: {\n        dev: \"docker-compose up -d\",\n        \"dev:api\": `cd api && npm run dev --port ${config.API_PORT}`,\n        database: group({\n            commands: {\n                migrate: \"npm run migrate\",\n                seed: \"npm run seed\",\n                backup: group({\n                    commands: {\n                        create: cmd({\n                            help: \"Create a database backup\",\n                            options: {\n                                name: z.string().describe(\"Backup name\"),\n                            },\n                            exec: (ctx) =>\n                                console.log(\n                                    `Creating backup: ${ctx.options.name}`\n                                ),\n                        }),\n                    },\n                }),\n            },\n        }),\n    },\n});\n```\n\nPut your actual values in `.env.axogen`:\n\n```bash\nDATABASE_URL=postgresql://localhost:5432/myapp\nAPI_PORT=3001\nWEB_PORT=3000\nNODE_ENV=development\n```\n\nOne command generates all your configs:\n\n```bash\naxogen generate\n```\n\nChange `API_PORT` to 4000, regenerate, and every URL automatically updates. One\nsource of truth, everything else just follows.\n\n## ✨ Features\n\n- **🛡️ Full type safety** with Zod validation and TypeScript IntelliSense\n- **🔐 Secret detection** prevents accidental commits of sensitive data\n- **📁 10+ file formats** - `.env`, JSON, YAML, TOML, XML, templates, and more\n- **🎨 Template engine support** (Nunjucks, Handlebars, Mustache)\n- **⚡ Nested command system** with help text and typed arguments\n- **🎯 Conditional generation** based on environment or custom logic\n- **💾 Automatic backups** before overwriting files\n- **🌍 Language-agnostic** - Works with Python, Go, Rust, Java, PHP, etc.\n- **⚡ Fast** - 10,000 configs generated in ~2 seconds\n\n## 🚀 Quick Start\n\n```bash\n# Install\nnpm install @axonotes/axogen\n\n# Create basic config\necho 'import {defineConfig, env} from \"@axonotes/axogen\";\n\nexport default defineConfig({\n    targets: {\n        app: env({\n            path: \".env\",\n            variables: {\n                NODE_ENV: \"development\",\n                PORT: 3000,\n            },\n        }),\n    },\n});' > axogen.config.ts\n\n# Generate\naxogen generate\n\n# Run commands\naxogen run --help\n```\n\n## 🤔 Why Not Just Use...?\n\n**Language-specific tools** (dotenv, Viper, dynaconf): Only work for one\nlanguage. What about your Docker configs? Kubernetes manifests?\n\n**Infrastructure tools** (Terraform, Helm): Great for infrastructure, overkill\nfor application config.\n\n**The key difference:** Axogen works for ANY project in ANY language. Your\nPython API, Go microservice, React frontend, Docker configs, and Kubernetes\nmanifests - all from one TypeScript source of truth.\n\n## 📚 Examples\n\n### Multi-Service Monorepo\n\n```typescript\nexport default defineConfig({\n    targets: {\n        auth: env({ path: \"services/auth/.env\", variables: {...} }),\n        api: env({ path: \"services/api/.env\", variables: {...} }),\n        web: env({ path: \"apps/web/.env.local\", variables: {...} }),\n        docker: template({\n            path: \"docker-compose.yml\",\n            template: \"docker-compose.njk\",\n            variables: config,\n        }),\n    },\n});\n```\n\n### Environment-Specific Configs\n\n```typescript\nconst config = getConfig(); // Your function that returns different values based on NODE_ENV\n\nexport default defineConfig({\n    targets: {\n        production: env({\n            path: \"prod/.env\",\n            variables: config.production,\n            condition: process.env.NODE_ENV === \"production\",\n        }),\n    },\n});\n```\n\n## ⚠️ Current Status\n\nThis is v0.5.0 - actively developed and used for\n[AxonotesCore](https://github.com/axonotes/AxonotesCore), but still evolving.\nThe API is getting more stable, but expect some changes before v1.0.\n\nGenerated files are just normal `.env`, JSON, etc. - your apps never depend on\nAxogen at runtime. Worst case, you can stop using Axogen and keep the generated\nconfigs.\n\n## 🤝 Contributing\n\nFound a bug? Have a feature idea? Open an issue or join the\n[Discord](https://discord.gg/myBMaaDeQu).\n\n## 📊 Star History\n\n<a href=\"https://www.star-history.com/#axonotes/axogen&Date\">\n <picture>\n   <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://api.star-history.com/svg?repos=axonotes/axogen&type=Date&theme=dark\" />\n   <source media=\"(prefers-color-scheme: light)\" srcset=\"https://api.star-history.com/svg?repos=axonotes/axogen&type=Date\" />\n   <img alt=\"Star History Chart\" src=\"https://api.star-history.com/svg?repos=axonotes/axogen&type=Date\" />\n </picture>\n</a>\n\n## 📄 License\n\nMIT\n\n---\n\n<p align=\"center\">\n  Built with ❤️ by <a href=\"https://github.com/imgajeed76\">Oliver Seifert</a>\n</p>\n",
    "license": {
      "name": "MIT License",
      "text": "MIT License\n\nCopyright (c) 2025 Oliver Seifert\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
      "spdxId": "MIT",
      "url": "https://api.github.com/licenses/mit"
    },
    "stats": {
      "stars": 20,
      "forks": 0,
      "watchers": 20,
      "openIssues": 0,
      "lastUpdated": "2025-09-14T22:12:30Z",
      "createdAt": "2025-07-16T16:07:18Z",
      "size": 2357,
      "language": "TypeScript",
      "languages": [
        {
          "name": "TypeScript",
          "bytes": 378782,
          "percentage": 82.68201056930623,
          "color": "#3178c6"
        },
        {
          "name": "CSS",
          "bytes": 43843,
          "percentage": 9.57022083781725,
          "color": "#663399"
        },
        {
          "name": "MDX",
          "bytes": 35440,
          "percentage": 7.735981262510395,
          "color": "#fcb32c"
        },
        {
          "name": "HTML",
          "bytes": 54,
          "percentage": 0.011787330366127578,
          "color": "#e34c26"
        }
      ]
    },
    "platform": {
      "type": "github",
      "url": "https://github.com/axonotes/axogen",
      "apiAvailable": true
    },
    "writtenAt": "2025-10-21T00:00:00.000Z",
    "updatedAt": "2025-10-21T00:00:00.000Z"
  },
  {
    "title": "TFUtils-GO",
    "portfolioUrl": "/projects/tfutils-go",
    "repoUrl": "https://github.com/ImGajeed76/tfutils-go",
    "description": "TFUtils-Go is a powerful Go rewrite of the TFUtils project, designed to help TFBern students manage their projects more\nefficiently. This new version brings improved performance, easier distribution, and maintains the user-friendly approach\nof the original - now powered by Go!",
    "role": "Creator",
    "technologies": [
      "Go",
      "CLI",
      "Charmer",
      "Bubble Tea"
    ],
    "status": "Active",
    "content": "# TFUtils-GO: Making Development Less Annoying\n\n## The Idea: What It Is and Why I Built It\n\nTFUtils-GO is the next evolution of my earlier project, TFUtils. The original version, written in Python, served its\npurpose but ran into some significant challenges, as detailed in\nthe [TFUtils article](https://oseifert.vercel.app/projects/851103459). The two main hurdles were:\n\n1. **Difficult Distribution:** Sharing the Python tool with classmates required complex bundling into executables, which\n   was often unreliable and platform-specific.\n2. **Network Speed:** Accessing project templates over the TFBern network via standard file sharing felt sluggish in the\n   Python version.\n\nWhile developing the original TFUtils, I started feeling constrained by its limitations and the growing complexity of\nmanaging the TUI and commands directly within the main application. This frustration pushed me to look for better\nsolutions, which led me to discover and quickly grow fond of the Go programming language (Golang).\n\nGo seemed ideal for tackling the distribution and potential performance issues head-on. Furthermore, I considered our\nspecific context at TFBern: as Electronics Technician apprentices, many of us gain experience with C programming. In my\nopinion, the syntax and concepts in Go feel closer to C than Python does, potentially making it **easier for fellow\nstudents to understand and contribute** to the project compared to Python. Go also enforces a **strict, unified code\nstyle** through tools like `gofmt`, which is a huge advantage for collaboration and long-term maintenance, ensuring the\ncodebase remains consistent even with multiple contributors.\n\nA core goal driving this rewrite is **long-term maintainability**. I wanted to build a solid foundation that abstracts\naway the complexities of the TUI and command handling. This way, even after I leave TFBern, other students or teachers\ncan hopefully **continue developing TFUtils-GO more easily** by focusing on creating specific command modules (\"Charms\")\nrather than wrestling with the core infrastructure.\n\nAs with the original, the primary audience for TFUtils-GO remains my fellow Electronics Technician apprentices at\nTFBern.\n\n## The Journey: From Concept to Reality\n\nBefore diving into coding this time, I spent more time thinking about the architecture. I realized that simply rewriting\nTFUtils line-for-line in Go wouldn't address the underlying desire for a more modular and potentially reusable system,\nnor would it fully achieve the goal of easier future contributions. I wanted something that could potentially be adapted\nfor other command-line automation tasks beyond just the TFBern context.\n\nThis led to the creation of **[Charmer](https://github.com/ImGajeed76/charmer)**, a separate Go library born out of the\nneeds for TFUtils-GO. Charmer is still in its early stages, but it provides the core framework for building TUI-based\ncommand-line tools like TFUtils-GO. Its main job is similar to the discovery mechanism in the old TFUtils: it\nautomatically finds command modules (which I call \"Charms\") located in a specific `Charms` folder, loads them, and\npresents them in the text-based interface. This modular approach is key to simplifying future development.\n\nA significant amount of effort also went into optimizing file handling within Charmer. I developed a unified system for\nmanaging file paths, allowing it to treat SFTP paths (like `sftp://user@host/path/to/file`) and local paths (\n`C:\\path\\to\\file` or `/path/to/file`) consistently. This makes operations like copying files between a remote SFTP\nserver and the local machine (or even between two SFTP servers) much simpler to implement within a Charm.\n\nConsequently, the TFUtils-GO project itself is much leaner this time. Instead of being packed with UI logic and command\nimplementations, it primarily leverages the Charmer library for its core functionality. The specific TFBern-related\ntasks will be implemented as individual Charms, making the main project simpler and focusing contributions on\nself-contained modules.\n\n## The Outcome: Where It Stands and What I Learned\n\nTFUtils-GO is currently under active development and, while not yet matching the full feature set of the original Python\nversion, the foundation is much stronger and designed for longevity. Development focus has understandably been on\nCharmer recently, as it provides the essential engine for TFUtils-GO and embodies the goal of creating an extensible\ncore. However, the architecture is now in place, making it theoretically straightforward to reimplement all the previous\nTFUtils functions as Charms within this new Go-based structure.\n\nThis project has been a fantastic learning experience, significantly deepening my understanding of Go. While I'm still\nfar from being an expert, I genuinely enjoy working with the language and its ecosystem, and I plan to continue using it\nfor future projects. The focus on creating the reusable Charmer library has also taught me a lot about designing more\nabstract and maintainable software.\n\nI'm particularly proud of the unified path handling system developed for Charmer and the overall modular design\nfacilitated by the library. Although much of the visible work resides within Charmer for now, it directly serves the\nprimary goals set for TFUtils-GO: improved performance, easier distribution, and crucially, a more sustainable and\ncollaborative future for the tool at TFBern.",
    "readme": "# 🚀 TFUtils-Go\n\nTFUtils-Go is a powerful Go rewrite of the popular TFUtils project, designed to help TFBern students manage their\nprojects more efficiently. This new version brings improved performance, easier distribution, and maintains the\nuser-friendly approach of the original - now powered by Go!\n\n## ✨ Features\n\n- ⚡ **High Performance** - Lightning-fast operations with Go's speed\n- 🎯 **Simple Interface** - Maintaining the user-friendly approach of TFUtils\n- 📦 **Easy Distribution** - Single binary deployment for all platforms\n- 🛠️ **Enhanced Reliability** - Leveraging Go's strong type system and error handling\n\n## 🎯 Project Status\n\n⚠️ **Early Alpha Stage**\n\nThis project is currently in early development. Features and APIs may change significantly. We recommend using the\noriginal TFUtils for production environments until the Go version reaches stable release.\n\n## 🚀 Quick Start\n\nComing soon! The installation process will be as simple as:\n\n```bash\n# Download options will be available soon\n# For now, you can build from source:\ngo install github.com/ImGajeed76/tfutils-go@latest\n```\n\n## 🌟 Why Go?\n\nThe transition to Go brings several advantages:\n\n- **Faster Execution** - Native compilation for better performance\n- **Simpler Distribution** - Single binary deployment\n- **Cross-Platform** - Easy builds for all major platforms\n- **Robust Error Handling** - Improved reliability and debugging\n- **Maintainable Codebase** - Clean, structured Go code\n\n## 📚 Documentation\n\nDocumentation is under development. Once released, you'll find:\n\n- Installation guides\n- Migration from Python TFUtils\n- Usage examples\n- API reference\n- Best practices\n\n## 🛠️ Building from Source\n\n```bash\n# Clone the repository\ngit clone https://github.com/ImGajeed76/tfutils-go\ncd tfutils-go\n\n# Build\ngo build\n\n# Run\n./tfutils-go\n```\n\n## 💬 Support & Community\n\n- 📝 [Report Issues](https://github.com/ImGajeed76/tfutils-go/issues)\n- 💡 [Feature Requests](https://github.com/ImGajeed76/tfutils-go/issues)\n- 📧 Contact: [ImGajeed76](mailto:github.staging362@passmail.net)\n\n## 🤝 Contributing\n\nContributions are welcome! As we're in early development, please:\n\n1. Open an issue to discuss proposed changes\n2. Fork the repository\n3. Create a feature branch\n4. Submit a Pull Request\n\n## 📄 License\n\nTFUtils-Go is licensed under the GNU General Public License v3.0 - see the [LICENSE](LICENSE) file for details.\n\n---\n\n🌟 **Purpose**: Bringing the power and simplicity of TFUtils to Go, making project management even more efficient for\nTFBern students.\n\n⚠️ **Note**: This is an alpha release. The project is under active development, and we welcome your feedback and\ncontributions!\n\nBuilt with ❤️ in Switzerland by ImGajeed76",
    "license": {
      "name": "GNU General Public License v3.0",
      "text": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.",
      "spdxId": "GPL-3.0",
      "url": "https://api.github.com/licenses/gpl-3.0"
    },
    "stats": {
      "stars": 1,
      "forks": 1,
      "watchers": 1,
      "openIssues": 0,
      "lastUpdated": "2025-04-22T06:44:41Z",
      "createdAt": "2025-02-16T17:19:07Z",
      "size": 68,
      "language": "Go",
      "languages": [
        {
          "name": "Go",
          "bytes": 8443,
          "percentage": 100,
          "color": "#00ADD8"
        }
      ]
    },
    "platform": {
      "type": "github",
      "url": "https://github.com/ImGajeed76/tfutils-go",
      "apiAvailable": true
    },
    "writtenAt": "2025-10-21T00:00:00.000Z",
    "updatedAt": "2025-10-21T00:00:00.000Z"
  },
  {
    "title": "TF Utils",
    "portfolioUrl": "/projects/tfUtils",
    "repoUrl": "https://github.com/ImGajeed76/tfUtils",
    "liveUrl": "https://imgajeed76.github.io/tfUtils/",
    "description": "A user-friendly tool that helps TFBern students manage their projects more efficiently. Perfect for both beginners and\nadvanced users, TF Utils streamlines project workflows with its intuitive interface and powerful features.",
    "role": "Developer",
    "technologies": [
      "Python",
      "Textual",
      "Go",
      "MkDocs"
    ],
    "status": "Active",
    "content": "# TF Utils: Making Project Setup Less Annoying\n\n## The Idea: What It Is and Why I Built It\n\nAt its core, TF Utils is a little command-line tool with a friendly text-based interface (TUI) that helps automate some\nof the tedious parts of setting up projects. Specifically, it's designed for fellow apprentices in the Electronics\nTechnician (Elektroniker) program at TFBern.\n\nHonestly, the whole idea started because I was getting really frustrated myself. As an apprentice here, I also enjoy\ncoding, and the constant cycle of copying project templates, carefully renaming everything, trying to keep track of\nversions, and dealing with inconsistencies across projects felt super inefficient. I thought, \"There has to be a better\nway,\" so I decided to build one. My goal was basically to scratch my own itch and hopefully make things a bit easier for\nothers in the program too.\n\n## The Journey: From Simple Script to TUI Tool\n\nIt didn't start as anything fancy. My first attempt was just a small Python script to make the standard uVision\ntemplates we use work nicely with CLion, which is the IDE I prefer. But I quickly realized that just patching templates\nwasn't enough. I wanted to handle more tasks, and a single script was going to get messy fast.\n\nThat led me to think about a more organized approach. I started building a system where I could define different tasks\nor \"commands\" in separate files. The main program would automatically find these commands and show them in a simple\nconsole menu. This worked okay for a while, but managing the user interaction in the console got complicated as I added\nmore features.\n\nThat's when I discovered **Textual**, a Python library for building TUIs. It was a game-changer! Suddenly, I didn't have\nto wrestle with printing menus, handling user input, or clearing the screen manually. Textual provided cool features\nlike pop-up modals and even mouse support, letting me focus on the actual _logic_ of the commands.\n\nAdding new commands became much cleaner. For example, you can just create a new Python file (like `hello.py`) in the\n`interfaces` folder, write a function, and add a simple `@interface` decorator:\n\n```py\n# Example: interfaces/hello.py\nfrom textual.containers import Container\nfrom src.lib.interface import interface # My custom decorator\nfrom src.lib.utils import console\n\n@interface(\"My First Interface\") # This makes it show up in the TUI\nasync def hello_world(container: Container):\n    \"\"\"This is my first interface!\"\"\"\n    await console.print(container, \"Hello, World!\") # The actual command logic\n```\n\nThe main program picks this up automatically, making it really easy for anyone (even me later!) to add new automation\ntasks without digging through complex UI code.\n\n## Navigating Challenges: Hitting Python's Limits\n\nPretty soon, though, I ran into a couple of big hurdles that made me realize Python might not have been the _perfect_\nchoice for this specific tool, despite being great for getting started:\n\n1. **Sharing the Tool Was a Pain:** Python scripts need a Python interpreter to run. To share TF Utils with classmates\n   who might not have Python set up (or the right libraries), I had to bundle it into an `.exe` file for Windows. Using\n   tools like AutoPyToExe felt like black magic, involving specific DLLs and complicated build scripts that often only\n   worked reliably on my own laptop. This also basically locked the tool to Windows.\n2. **Speed Over the Network:** The tool often needs to access project templates stored on our internal network drives.\n   The Python version did this through the standard Windows file sharing, which could be noticeably slow, especially\n   when copying lots of files.\n\nThinking about how to solve these issues led me to consider rewriting the tool in **Go (Golang)**. Go seemed like a good\nfit because:\n\n1. It compiles directly into a single executable file for Windows, Mac, or Linux. No complex bundling needed, making\n   distribution way easier and truly cross-platform.\n2. Go is known for being fast, especially with network tasks. I could potentially use more direct methods like SFTP to\n   talk to the server, hopefully speeding things up compared to going through Windows Explorer.\n\n## The Outcome: Where It Stands and What I Learned\n\nRight now, TF Utils (the Python version) is a working tool with a pretty nice TUI that does what I originally set out to\ndo: automate common project setup tasks. It's documented, reasonably easy to add new commands to, and myself and a few\nfriends in the program are actually using it regularly, which feels great! The build process is still clunky, but the\ntool itself is helpful.\n\nYou can check out the documentation here, which I put together using MkDocs with the Material\ntheme: [https://imgajeed76.github.io/tfUtils/](https://imgajeed76.github.io/tfUtils/)\n\nSo, did I meet my goal? I think so. I wanted a structured way to simplify common tasks, and the current tool does that.\n\nAlong the way, I definitely learned a lot:\n\n- Got much better at using Python decorators for cool things like automatically discovering functions.\n- Figured out how to build decent TUIs with Textual.\n- Got a real-world lesson in the pros and cons of different programming languages – Python is awesome for quick\n  development, but compiled languages like Go can be much better for distribution and performance in certain situations.\n\nI'm quite proud of how the TUI turned out and the modular system for adding commands. It feels pretty slick to use.\n\nAs mentioned, the next big idea is to actually build that V2 in Go. The plan is to tackle those distribution and speed\nproblems head-on, making TF Utils even more useful and easier to share with everyone in the Electronics Technician\nprogram.",
    "readme": "# TF Utils\n\nA user-friendly tool that helps TFBern students manage their projects more efficiently. Perfect for both beginners and advanced users!\n\n## 🚀 Quick Start\n\n1. Download the latest installer from our [releases page](https://github.com/ImGajeed76/tfUtils/releases)\n2. Run the installer (make sure to check \"Add to PATH\" ✅)\n3. Open your project folder and type `tfutils` in the address bar\n\nThat's it! You're ready to go! 🎉\n\n## 📚 Documentation\n\n**[Visit our Documentation Site](https://imgajeed76.github.io/tfUtils/)** for:\n- Detailed installation instructions\n- User guides and tutorials\n- Developer documentation\n- Examples and best practices\n- Troubleshooting tips\n\n## 💬 Support & Community\n\n- 📝 [Report Issues](https://github.com/ImGajeed76/tfUtils/issues)\n- 💡 [Join Discussions](https://github.com/ImGajeed76/tfUtils/discussions)\n- 📧 Contact: [ImGajeed76](mailto:github.staging362@passmail.net)\n\n## 📄 License\n\nTF Utils is licensed under the GNU GPL v3.0. See [LICENSE](LICENSE) for details.\n",
    "license": {
      "name": "GNU Affero General Public License v3.0",
      "text": "                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n<https://www.gnu.org/licenses/>.\n",
      "spdxId": "AGPL-3.0",
      "url": "https://api.github.com/licenses/agpl-3.0"
    },
    "stats": {
      "stars": 3,
      "forks": 1,
      "watchers": 3,
      "openIssues": 0,
      "lastUpdated": "2025-04-21T20:18:00Z",
      "createdAt": "2024-09-02T12:35:46Z",
      "size": 24003,
      "language": "Python",
      "languages": [
        {
          "name": "Python",
          "bytes": 116290,
          "percentage": 94.25047007715749,
          "color": "#3572A5"
        },
        {
          "name": "Jinja",
          "bytes": 7094,
          "percentage": 5.749529922842508,
          "color": "#a52a22"
        }
      ]
    },
    "platform": {
      "type": "github",
      "url": "https://github.com/ImGajeed76/tfUtils",
      "apiAvailable": true
    },
    "writtenAt": "2025-10-21T00:00:00.000Z",
    "updatedAt": "2025-10-21T00:00:00.000Z"
  }
]